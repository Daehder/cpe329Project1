
LCD_4bt_Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000252  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059e  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c8  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000209  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000210  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a1  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8e:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write_cmd>:
	return 1;
}

// runs pins and delays to send LCD a command 
void lcd_write_cmd(char command){
	uint8_t ms_bits = (command & 0xF0);
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
	uint8_t ls_bits = (command <<4);
  9a:	82 95       	swap	r24
  9c:	80 7f       	andi	r24, 0xF0	; 240

	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	95 b9       	out	0x05, r25	; 5
	PORTD = ms_bits;		// set command upper bits
  a4:	2b b9       	out	0x0b, r18	; 11
	PORTB |= 0b00000100;	// E, RW, RS = 1,0,0
  a6:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	95 b9       	out	0x05, r25	; 5
	PORTD = ls_bits;		// set command lower bits
  ae:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000100;	// E, RW, RS = 1,0,0
  b0:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	87 ec       	ldi	r24, 0xC7	; 199
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_write_cmd+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_write_cmd+0x2c>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <lcd_initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e7       	ldi	r18, 0x7F	; 127
  c8:	85 eb       	ldi	r24, 0xB5	; 181
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <lcd_initialize+0x6>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_initialize+0x10>
  d6:	00 00       	nop
}

// runs LCD initialization code
void lcd_initialize(){
	_delay_ms(35);					// power ON delay > 30ms
	lcd_write_cmd(func_set_4bit);		// run function set
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	87 ec       	ldi	r24, 0xC7	; 199
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_initialize+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_initialize+0x22>
  e8:	00 00       	nop
	_delay_us(std_delay);			// delay > 50us
	lcd_write_cmd(disp_ctrl);		// run display set (off)
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_cmd>
  f0:	87 ec       	ldi	r24, 0xC7	; 199
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_initialize+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_initialize+0x34>
  fa:	00 00       	nop
	_delay_us(std_delay);			// delay > 50us
	lcd_write_cmd(disp_clear);		// run clear display
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e7       	ldi	r24, 0x7F	; 127
 104:	9e e3       	ldi	r25, 0x3E	; 62
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_initialize+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_initialize+0x46>
 10c:	00 00       	nop
	_delay_ms(4);					// delay > 1.5 ms
	lcd_write_cmd(entry_mode);		// set entry mode
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_initialize+0x52>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_initialize+0x58>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <lcd_write_char>:
	_delay_us(std_delay);			// delay > 50us
}

//  runs pins and delays to have LCD print characters 
void lcd_write_char(char character){
	uint8_t ms_bits = (character & 0xF0);
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
	uint8_t ls_bits = (character <<4);
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
	
	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
 12a:	95 b1       	in	r25, 0x05	; 5
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	95 b9       	out	0x05, r25	; 5
	PORTD = ms_bits;		// send character upper bits
 130:	2b b9       	out	0x0b, r18	; 11
	PORTB |= 0b00000101;	// E, RW, RS = 1,0,1
 132:	95 b1       	in	r25, 0x05	; 5
 134:	95 60       	ori	r25, 0x05	; 5
 136:	95 b9       	out	0x05, r25	; 5
	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
 138:	95 b1       	in	r25, 0x05	; 5
 13a:	98 7f       	andi	r25, 0xF8	; 248
 13c:	95 b9       	out	0x05, r25	; 5
	PORTD = ls_bits;		// send character upper bits
 13e:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000101;	// E, RW, RS = 1,0,1
 140:	85 b1       	in	r24, 0x05	; 5
 142:	85 60       	ori	r24, 0x05	; 5
 144:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
 146:	85 b1       	in	r24, 0x05	; 5
 148:	88 7f       	andi	r24, 0xF8	; 248
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	87 ec       	ldi	r24, 0xC7	; 199
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_write_char+0x2e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_write_char+0x34>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <check_buttons>:
}

// check which (if any) buttons are pressed
uint8_t check_buttons(){
	// if pin12 (left) button is pressed
	if(~PINB & 0b00010000){
 15a:	1c 99       	sbic	0x03, 4	; 3
 15c:	0b c0       	rjmp	.+22     	; 0x174 <check_buttons+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	84 e3       	ldi	r24, 0x34	; 52
 162:	9c e0       	ldi	r25, 0x0C	; 12
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <check_buttons+0xa>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <check_buttons+0x14>
 16e:	00 00       	nop
		_delay_ms(debounce);
		return left_button;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	08 95       	ret
	}
	// if pin11 (right) button is pressed
	else if(~PINB & 0b00001000){
 174:	1b 99       	sbic	0x03, 3	; 3
 176:	0b c0       	rjmp	.+22     	; 0x18e <check_buttons+0x34>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	9c e0       	ldi	r25, 0x0C	; 12
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <check_buttons+0x24>
 186:	00 c0       	rjmp	.+0      	; 0x188 <check_buttons+0x2e>
 188:	00 00       	nop
		_delay_ms(debounce);
		return right_button;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
	}
	// if no button is pressed
	else
		return 0;
 18e:	80 e0       	ldi	r24, 0x00	; 0
}
 190:	08 95       	ret

00000192 <lcd_print_string>:

// prints string of characters to LCD
void lcd_print_string(char string[]){
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	8c 01       	movw	r16, r24
 1a0:	7c 01       	movw	r14, r24
for(int x=0; x<strlen(string); x++){
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	1b c0       	rjmp	.+54     	; 0x1de <lcd_print_string+0x4c>
	if(x==16){
 1a8:	c0 31       	cpi	r28, 0x10	; 16
 1aa:	d1 05       	cpc	r29, r1
 1ac:	61 f4       	brne	.+24     	; 0x1c6 <lcd_print_string+0x34>
		lcd_write_cmd(set_line2);
 1ae:	80 ec       	ldi	r24, 0xC0	; 192
 1b0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_cmd>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	80 e7       	ldi	r24, 0x70	; 112
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <lcd_print_string+0x28>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_print_string+0x32>
 1c4:	00 00       	nop
		_delay_ms(std_delay);
	}
	lcd_write_char(string[x]);
 1c6:	f7 01       	movw	r30, r14
 1c8:	81 91       	ld	r24, Z+
 1ca:	7f 01       	movw	r14, r30
 1cc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_write_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	87 ec       	ldi	r24, 0xC7	; 199
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_print_string+0x42>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_print_string+0x48>
 1da:	00 00       	nop
		return 0;
}

// prints string of characters to LCD
void lcd_print_string(char string[]){
for(int x=0; x<strlen(string); x++){
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	f8 01       	movw	r30, r16
 1e0:	01 90       	ld	r0, Z+
 1e2:	00 20       	and	r0, r0
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <lcd_print_string+0x4e>
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	e0 1b       	sub	r30, r16
 1ea:	f1 0b       	sbc	r31, r17
 1ec:	ce 17       	cp	r28, r30
 1ee:	df 07       	cpc	r29, r31
 1f0:	d8 f2       	brcs	.-74     	; 0x1a8 <lcd_print_string+0x16>
	for(int j=0; j<strlen(line2); j++){
		lcd_write_char(line2[j]);
		_delay_us(std_delay);
	}
*/
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <clear_display>:

void clear_display(){
	lcd_write_cmd(disp_clear);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	8f e7       	ldi	r24, 0x7F	; 127
 208:	9e e3       	ldi	r25, 0x3E	; 62
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <clear_display+0xa>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <clear_display+0x10>
 210:	00 00       	nop
 212:	08 95       	ret

00000214 <main>:
void clear_display(); 
uint8_t check_buttons(); 

int main(void)
{
	UCSR0B = 0;			// allows atmel to R/W to pins 0 and 1
 214:	10 92 c1 00 	sts	0x00C1, r1
	DDRB = 0b00100111;		// Pin11-12 = Input; E, RW, RS, PIN13 = output
 218:	87 e2       	ldi	r24, 0x27	; 39
 21a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;		// DB(7-0) = output	
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= 0b00011000;	// set internal pull-ups @ pin11/12
 220:	85 b1       	in	r24, 0x05	; 5
 222:	88 61       	ori	r24, 0x18	; 24
 224:	85 b9       	out	0x05, r24	; 5
	
	//initialize LCD
	lcd_initialize();
 226:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_initialize>
	
	// print to the LCD
	lcd_print_string("Hello, World!   Press a button?");
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print_string>

	while(1){
		// if a button is pressed
		if(check_buttons()){
 232:	0e 94 ad 00 	call	0x15a	; 0x15a <check_buttons>
 236:	88 23       	and	r24, r24
 238:	41 f0       	breq	.+16     	; 0x24a <main+0x36>
			PORTB |= 0b00100000;	// turn on led
 23a:	2d 9a       	sbi	0x05, 5	; 5
			clear_display();
 23c:	0e 94 00 01 	call	0x200	; 0x200 <clear_display>
			lcd_print_string("You did it!!!");
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_print_string>
 248:	f4 cf       	rjmp	.-24     	; 0x232 <main+0x1e>
		}
		else
			PORTB &= 0b11011111;	// turn off led
 24a:	2d 98       	cbi	0x05, 5	; 5
 24c:	f2 cf       	rjmp	.-28     	; 0x232 <main+0x1e>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
