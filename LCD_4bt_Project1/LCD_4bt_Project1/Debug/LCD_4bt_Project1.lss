
LCD_4bt_Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000459  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e0  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000213  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <lcd_write_cmd>:
	return 1;
}

// runs pins and delays to send LCD a command 
void lcd_write_cmd(char command){
	uint8_t ms_bits = (command & 0xF0);
  80:	28 2f       	mov	r18, r24
  82:	20 7f       	andi	r18, 0xF0	; 240
	uint8_t ls_bits = (command <<4);
  84:	82 95       	swap	r24
  86:	80 7f       	andi	r24, 0xF0	; 240

	PORTB &= 0b11111000;    // E, RW, RS = 0,0
  88:	95 b1       	in	r25, 0x05	; 5
  8a:	98 7f       	andi	r25, 0xF8	; 248
  8c:	95 b9       	out	0x05, r25	; 5
	PORTD = ms_bits;		// set command upper bits
  8e:	2b b9       	out	0x0b, r18	; 11
	PORTB |= 0b00000100;	// E, RW, RS = 1,0,0
  90:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
  92:	95 b1       	in	r25, 0x05	; 5
  94:	98 7f       	andi	r25, 0xF8	; 248
  96:	95 b9       	out	0x05, r25	; 5
	PORTD = ls_bits;		// set command lower bits
  98:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000100;	// E, RW, RS = 1,0,0
  9a:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <busy>:
	_delay_ms(3);
}

// if busy return 0 if not return 1
void busy(){
	PORTB |= 0b00000010;	// E, RW, RS = 0,1,0
  a4:	29 9a       	sbi	0x05, 1	; 5
	while(PIND & 0b100000000)
  a6:	89 b1       	in	r24, 0x09	; 9
  a8:	08 95       	ret

000000aa <lcd_initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e7       	ldi	r18, 0x7F	; 127
  ac:	85 eb       	ldi	r24, 0xB5	; 181
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <lcd_initialize+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_initialize+0x10>
  ba:	00 00       	nop
}

// runs LCD initialization code
void lcd_initialize(){
	_delay_ms(35);					// power ON delay > 30ms
	lcd_write_cmd(func_set_4bit);	// run function set
  bc:	88 e2       	ldi	r24, 0x28	; 40
  be:	0e 94 40 00 	call	0x80	; 0x80 <lcd_write_cmd>
	busy();							// delay > 50us
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <busy>
	lcd_write_cmd(disp_ctrl);		// run display set (off)
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	0e 94 40 00 	call	0x80	; 0x80 <lcd_write_cmd>
	busy();							// delay > 50us
  cc:	0e 94 52 00 	call	0xa4	; 0xa4 <busy>
	lcd_write_cmd(disp_clear);		// run clear display
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 40 00 	call	0x80	; 0x80 <lcd_write_cmd>
	busy();							// delay > 1.5 ms
  d6:	0e 94 52 00 	call	0xa4	; 0xa4 <busy>
	lcd_write_cmd(entry_mode);		// set entry mode
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0e 94 40 00 	call	0x80	; 0x80 <lcd_write_cmd>
	busy();							// delay > 50us
  e0:	0e 94 52 00 	call	0xa4	; 0xa4 <busy>
  e4:	08 95       	ret

000000e6 <main>:
void busy();
uint8_t check_buttons(); 

int main(void)
{
	UCSR0B = 0;			// allows atmel to R/W to pins 0 and 1
  e6:	10 92 c1 00 	sts	0x00C1, r1
	DDRB = 0b00100111;		// Pin11-12 = Input; E, RW, RS, PIN13 = output
  ea:	87 e2       	ldi	r24, 0x27	; 39
  ec:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;		// DB(7-0) = output	
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= 0b00011000;	// set internal pull-ups @ pin11/12
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	88 61       	ori	r24, 0x18	; 24
  f6:	85 b9       	out	0x05, r24	; 5
	
	//initialize LCD
	lcd_initialize();
  f8:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_initialize>
			PORTB &= 0b11011111;	// turn off led
	}
	*/
	
	return 1;
}
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
