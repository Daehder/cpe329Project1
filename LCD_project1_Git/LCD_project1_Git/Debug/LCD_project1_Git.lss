
LCD_project1_Git.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  000008f8  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf8  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000342  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000851  00000000  00000000  00002377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3f       	cpi	r26, 0xFE	; 254
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 01 	call	0x326	; 0x326 <main>
  9e:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_cmd>:

//////////////////////////////HELPER FUNCTIONS//////////////////////////////////

// toggles pins and runs delays to send LCD a command 
void lcd_write_cmd(char command){
	PORTB &= 0b11111000;    // E = 0
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	98 7f       	andi	r25, 0xF8	; 248
  aa:	95 b9       	out	0x05, r25	; 5
	PORTD = command;		// set command
  ac:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000100;	// E = 0
  ae:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= 0b11111000;	// E = 0
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	87 ec       	ldi	r24, 0xC7	; 199
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_write_cmd+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_write_cmd+0x1a>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <lcd_initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	85 eb       	ldi	r24, 0xB5	; 181
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <lcd_initialize+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_initialize+0x10>
  d4:	00 00       	nop
}

// runs LCD initialization code
void lcd_initialize(){
	_delay_ms(35);					// power ON delay > 30ms
	lcd_write_cmd(func_set);		// run function set
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_initialize+0x1c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_initialize+0x22>
  e6:	00 00       	nop
	_delay_us(std_delay);			// delay > 40us
	lcd_write_cmd(disp_ctrl);		// run display set 
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
  ee:	87 ec       	ldi	r24, 0xC7	; 199
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_initialize+0x2e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_initialize+0x34>
  f8:	00 00       	nop
	_delay_us(std_delay);			// delay > 40us
	lcd_write_cmd(disp_clear);		// run clear display
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_initialize+0x40>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_initialize+0x46>
 10a:	00 00       	nop
	_delay_ms(2);					// delay > 1.5 ms
	lcd_write_cmd(entry_mode);		// set entry mode
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	87 ec       	ldi	r24, 0xC7	; 199
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_initialize+0x52>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_initialize+0x58>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <lcd_write_char>:
	_delay_us(std_delay);			// delay > 40us
}

//  toggles pins and runs delays for have LCD character writing  
void lcd_write_char(char character){
	PORTB &= 0b11111000;    // E = 0
 120:	95 b1       	in	r25, 0x05	; 5
 122:	98 7f       	andi	r25, 0xF8	; 248
 124:	95 b9       	out	0x05, r25	; 5
	PORTD = character;		// send character
 126:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000101;	// E = 1; RS = 1
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	85 60       	ori	r24, 0x05	; 5
 12c:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111000;	// E = 0; RS = 0
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	85 b9       	out	0x05, r24	; 5
 134:	87 ec       	ldi	r24, 0xC7	; 199
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_write_char+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_write_char+0x1e>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <check_buttons>:
}

// returns which button is press or returns 0 if not pressed
uint8_t check_buttons(){
	// if pin12 (left) button is pressed
	if(~PINB & 0b00010000){
 142:	1c 9b       	sbis	0x03, 4	; 3
 144:	07 c0       	rjmp	.+14     	; 0x154 <check_buttons+0x12>
		return left_button;
	}
	// if pin11 (right) button is pressed
	else if(~PINB & 0b00001000){
 146:	83 b1       	in	r24, 0x03	; 3
 148:	83 fb       	bst	r24, 3
 14a:	99 27       	eor	r25, r25
 14c:	90 f9       	bld	r25, 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	89 27       	eor	r24, r25
 152:	08 95       	ret

// returns which button is press or returns 0 if not pressed
uint8_t check_buttons(){
	// if pin12 (left) button is pressed
	if(~PINB & 0b00010000){
		return left_button;
 154:	82 e0       	ldi	r24, 0x02	; 2
		return right_button;
	}
	// if no button is pressed
	else
		return 0;
}
 156:	08 95       	ret

00000158 <lcd_print_string>:

// prints string of characters to LCD
void lcd_print_string(char string[]){	
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <lcd_print_string+0x12>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	// variables to check if there is LCD line overflow
	char *line1, *line2, *extra;
	line1 = getLine(string, &extra);
 16e:	be 01       	movw	r22, r28
 170:	6f 5f       	subi	r22, 0xFF	; 255
 172:	7f 4f       	sbci	r23, 0xFF	; 255
 174:	0e 94 f7 01 	call	0x3ee	; 0x3ee <getLine>
 178:	7c 01       	movw	r14, r24
 17a:	6c 01       	movw	r12, r24
   
	// print top line
	for(int i=0; i<strlen(line1); i++){
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	0d c0       	rjmp	.+26     	; 0x19c <lcd_print_string+0x44>
		lcd_write_char(line1[i]);
 182:	f6 01       	movw	r30, r12
 184:	81 91       	ld	r24, Z+
 186:	6f 01       	movw	r12, r30
 188:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write_char>
 18c:	87 ec       	ldi	r24, 0xC7	; 199
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_print_string+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_print_string+0x3e>
 196:	00 00       	nop
	// variables to check if there is LCD line overflow
	char *line1, *line2, *extra;
	line1 = getLine(string, &extra);
   
	// print top line
	for(int i=0; i<strlen(line1); i++){
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	f7 01       	movw	r30, r14
 19e:	01 90       	ld	r0, Z+
 1a0:	00 20       	and	r0, r0
 1a2:	e9 f7       	brne	.-6      	; 0x19e <lcd_print_string+0x46>
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	ee 19       	sub	r30, r14
 1a8:	ff 09       	sbc	r31, r15
 1aa:	0e 17       	cp	r16, r30
 1ac:	1f 07       	cpc	r17, r31
 1ae:	48 f3       	brcs	.-46     	; 0x182 <lcd_print_string+0x2a>
		lcd_write_char(line1[i]);
		_delay_us(std_delay);
	}
	
	// set cursor to beginning of line 2
	lcd_write_cmd(set_line2);
 1b0:	80 ec       	ldi	r24, 0xC0	; 192
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
   string = extra;
   line2 = getLine(string, &extra);
 1b6:	be 01       	movw	r22, r28
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <getLine>
 1c4:	7c 01       	movw	r14, r24
 1c6:	6c 01       	movw	r12, r24
	
	// print bottom line 
	for(int j=0; j<strlen(line2); j++){
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <lcd_print_string+0x90>
		lcd_write_char(line2[j]);
 1ce:	f6 01       	movw	r30, r12
 1d0:	81 91       	ld	r24, Z+
 1d2:	6f 01       	movw	r12, r30
 1d4:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write_char>
 1d8:	87 ec       	ldi	r24, 0xC7	; 199
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_print_string+0x84>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_print_string+0x8a>
 1e2:	00 00       	nop
	lcd_write_cmd(set_line2);
   string = extra;
   line2 = getLine(string, &extra);
	
	// print bottom line 
	for(int j=0; j<strlen(line2); j++){
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	f7 01       	movw	r30, r14
 1ea:	01 90       	ld	r0, Z+
 1ec:	00 20       	and	r0, r0
 1ee:	e9 f7       	brne	.-6      	; 0x1ea <lcd_print_string+0x92>
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	ee 19       	sub	r30, r14
 1f4:	ff 09       	sbc	r31, r15
 1f6:	0e 17       	cp	r16, r30
 1f8:	1f 07       	cpc	r17, r31
 1fa:	48 f3       	brcs	.-46     	; 0x1ce <lcd_print_string+0x76>
		lcd_write_char(line2[j]);
		_delay_us(std_delay);
	}

}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	08 95       	ret

00000212 <clear_display>:

// clear the display and set cursor to top left
void clear_display(){
	lcd_write_cmd(disp_clear);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	9f e1       	ldi	r25, 0x1F	; 31
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <clear_display+0xa>
 220:	00 c0       	rjmp	.+0      	; 0x222 <clear_display+0x10>
 222:	00 00       	nop
 224:	08 95       	ret

00000226 <delay_ms>:
	_delay_ms(2);
}

void delay_ms(uint8_t ms){
	while(ms>0){
 226:	88 23       	and	r24, r24
 228:	41 f0       	breq	.+16     	; 0x23a <delay_ms+0x14>
 22a:	ef e9       	ldi	r30, 0x9F	; 159
 22c:	ff e0       	ldi	r31, 0x0F	; 15
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <delay_ms+0x8>
 232:	00 c0       	rjmp	.+0      	; 0x234 <delay_ms+0xe>
 234:	00 00       	nop
		_delay_ms(1);
		ms--;
 236:	81 50       	subi	r24, 0x01	; 1
	lcd_write_cmd(disp_clear);
	_delay_ms(2);
}

void delay_ms(uint8_t ms){
	while(ms>0){
 238:	c1 f7       	brne	.-16     	; 0x22a <delay_ms+0x4>
 23a:	08 95       	ret

0000023c <led_driver_pin13>:
		_delay_ms(1);
		ms--;
	}
}

void led_driver_pin13(uint16_t freq_mHz, uint16_t duty){
 23c:	8f 92       	push	r8
 23e:	9f 92       	push	r9
 240:	af 92       	push	r10
 242:	bf 92       	push	r11
 244:	cf 92       	push	r12
 246:	df 92       	push	r13
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	7b 01       	movw	r14, r22
	double period_ms;
	if(freq_mHz == 0)
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	81 f0       	breq	.+32     	; 0x272 <led_driver_pin13+0x36>
		period_ms = 16;
	else
		period_ms = 1000000/freq_mHz;
 252:	9c 01       	movw	r18, r24
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	60 e4       	ldi	r22, 0x40	; 64
 25a:	72 e4       	ldi	r23, 0x42	; 66
 25c:	8f e0       	ldi	r24, 0x0F	; 15
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 39 04 	call	0x872	; 0x872 <__divmodsi4>
 264:	ca 01       	movw	r24, r20
 266:	b9 01       	movw	r22, r18
 268:	0e 94 40 03 	call	0x680	; 0x680 <__floatsisf>
 26c:	4b 01       	movw	r8, r22
 26e:	5c 01       	movw	r10, r24
 270:	08 c0       	rjmp	.+16     	; 0x282 <led_driver_pin13+0x46>
}

void led_driver_pin13(uint16_t freq_mHz, uint16_t duty){
	double period_ms;
	if(freq_mHz == 0)
		period_ms = 16;
 272:	0f 2e       	mov	r0, r31
 274:	81 2c       	mov	r8, r1
 276:	91 2c       	mov	r9, r1
 278:	f0 e8       	ldi	r31, 0x80	; 128
 27a:	af 2e       	mov	r10, r31
 27c:	f1 e4       	ldi	r31, 0x41	; 65
 27e:	bf 2e       	mov	r11, r31
 280:	f0 2d       	mov	r31, r0
	else
		period_ms = 1000000/freq_mHz;
		
	uint16_t tON = period_ms*duty/100;
 282:	b7 01       	movw	r22, r14
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatunsisf>
 28c:	a5 01       	movw	r20, r10
 28e:	94 01       	movw	r18, r8
 290:	0e 94 cc 03 	call	0x798	; 0x798 <__mulsf3>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	48 ec       	ldi	r20, 0xC8	; 200
 29a:	52 e4       	ldi	r21, 0x42	; 66
 29c:	0e 94 9d 02 	call	0x53a	; 0x53a <__divsf3>
 2a0:	0e 94 0f 03 	call	0x61e	; 0x61e <__fixunssfsi>
 2a4:	6b 01       	movw	r12, r22
 2a6:	7c 01       	movw	r14, r24
	uint16_t tOFF = period_ms - tON;
	
	PORTB |= 0b00100000;	// turn on led
 2a8:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(tON);
 2aa:	86 2f       	mov	r24, r22
 2ac:	0e 94 13 01 	call	0x226	; 0x226 <delay_ms>
	PORTB &= 0b11011111;	// turn off led
 2b0:	2d 98       	cbi	0x05, 5	; 5
		period_ms = 16;
	else
		period_ms = 1000000/freq_mHz;
		
	uint16_t tON = period_ms*duty/100;
	uint16_t tOFF = period_ms - tON;
 2b2:	b6 01       	movw	r22, r12
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatunsisf>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	c5 01       	movw	r24, r10
 2c2:	b4 01       	movw	r22, r8
 2c4:	0e 94 30 02 	call	0x460	; 0x460 <__subsf3>
 2c8:	0e 94 0f 03 	call	0x61e	; 0x61e <__fixunssfsi>
 2cc:	86 2f       	mov	r24, r22
	
	PORTB |= 0b00100000;	// turn on led
	delay_ms(tON);
	PORTB &= 0b11011111;	// turn off led
	delay_ms(tOFF);
 2ce:	0e 94 13 01 	call	0x226	; 0x226 <delay_ms>
}
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	df 90       	pop	r13
 2d8:	cf 90       	pop	r12
 2da:	bf 90       	pop	r11
 2dc:	af 90       	pop	r10
 2de:	9f 90       	pop	r9
 2e0:	8f 90       	pop	r8
 2e2:	08 95       	ret

000002e4 <ui_text>:

void ui_text(char text_string[], uint16_t freq_mHz, uint16_t duty){
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	8b 01       	movw	r16, r22
 2ee:	ea 01       	movw	r28, r20
	lcd_print_string(text_string);
 2f0:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_print_string>
	while(!check_buttons()){
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <ui_text+0x1a>
		led_driver_pin13(freq_mHz, duty);
 2f6:	be 01       	movw	r22, r28
 2f8:	c8 01       	movw	r24, r16
 2fa:	0e 94 1e 01 	call	0x23c	; 0x23c <led_driver_pin13>
	delay_ms(tOFF);
}

void ui_text(char text_string[], uint16_t freq_mHz, uint16_t duty){
	lcd_print_string(text_string);
	while(!check_buttons()){
 2fe:	0e 94 a1 00 	call	0x142	; 0x142 <check_buttons>
 302:	88 23       	and	r24, r24
 304:	c1 f3       	breq	.-16     	; 0x2f6 <ui_text+0x12>
		led_driver_pin13(freq_mHz, duty);
	}
	clear_display();
 306:	0e 94 09 01 	call	0x212	; 0x212 <clear_display>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	84 e3       	ldi	r24, 0x34	; 52
 30e:	9c e0       	ldi	r25, 0x0C	; 12
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <ui_text+0x2c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <ui_text+0x36>
 31a:	00 00       	nop
	_delay_ms(debounce);
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <main>:

/////////////////////////////MAIN FUNCTION//////////////////////////////////////

int main(void)
{
	UCSR0B = 0;				// allows atmel to R/W to pins 0 and 1
 326:	10 92 c1 00 	sts	0x00C1, r1
	DDRB = 0b00100111;		// Pin11-12 = Input; E, RW, RS, PIN13 = output
 32a:	87 e2       	ldi	r24, 0x27	; 39
 32c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;		// DB(7-0) = output	
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= 0b00011000;	// set internal pull-ups @ pin11/12
 332:	85 b1       	in	r24, 0x05	; 5
 334:	88 61       	ori	r24, 0x18	; 24
 336:	85 b9       	out	0x05, r24	; 5
	
	//initialize LCD
	lcd_initialize();
 338:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_initialize>
	
	while(1){
		ui_text("And what happened, then?", 0, 5);
 33c:	45 e0       	ldi	r20, 0x05	; 5
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("Well, ", 0, 10);
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	89 e1       	ldi	r24, 0x19	; 25
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("in Whoville they say", 0, 30);
 35c:	4e e1       	ldi	r20, 0x1E	; 30
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("- that the Grinch's small", 0, 30);
 36c:	4e e1       	ldi	r20, 0x1E	; 30
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	85 e3       	ldi	r24, 0x35	; 53
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("heart grew three sizes that day.", 0, 60);
 37c:	4c e3       	ldi	r20, 0x3C	; 60
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	8f e4       	ldi	r24, 0x4F	; 79
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("And then - the true meaning of", 0, 60);
 38c:	4c e3       	ldi	r20, 0x3C	; 60
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	80 e7       	ldi	r24, 0x70	; 112
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("Christmas came through,", 0, 80);
 39c:	40 e5       	ldi	r20, 0x50	; 80
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	8f e8       	ldi	r24, 0x8F	; 143
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("and the Grinch found the", 0, 100);
 3ac:	44 e6       	ldi	r20, 0x64	; 100
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	87 ea       	ldi	r24, 0xA7	; 167
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("strength of *ten* Grinches,", 0, 100);
 3bc:	44 e6       	ldi	r20, 0x64	; 100
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("plus two!", 1000, 50);
 3cc:	42 e3       	ldi	r20, 0x32	; 50
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	68 ee       	ldi	r22, 0xE8	; 232
 3d2:	73 e0       	ldi	r23, 0x03	; 3
 3d4:	8c ed       	ldi	r24, 0xDC	; 220
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		ui_text("Merry Holidays! Replay?", 1000, 50);
 3dc:	42 e3       	ldi	r20, 0x32	; 50
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	68 ee       	ldi	r22, 0xE8	; 232
 3e2:	73 e0       	ldi	r23, 0x03	; 3
 3e4:	86 ee       	ldi	r24, 0xE6	; 230
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ui_text>
		
	}
 3ec:	a7 cf       	rjmp	.-178    	; 0x33c <main+0x16>

000003ee <getLine>:
#include <String.h>
#include <stdlib.h>

#define LINE_SIZE 17

char *getLine(char *input, char **extra) {
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
   char *line = NULL;
   int ndx, lastSpace = -1;
   
   if (!input || strlen(input) < LINE_SIZE)
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	81 f1       	breq	.+96     	; 0x458 <getLine+0x6a>
 3f8:	fc 01       	movw	r30, r24
 3fa:	01 90       	ld	r0, Z+
 3fc:	00 20       	and	r0, r0
 3fe:	e9 f7       	brne	.-6      	; 0x3fa <getLine+0xc>
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	e8 1b       	sub	r30, r24
 404:	f9 0b       	sbc	r31, r25
 406:	e1 31       	cpi	r30, 0x11	; 17
 408:	f1 05       	cpc	r31, r1
 40a:	30 f1       	brcs	.+76     	; 0x458 <getLine+0x6a>
      return input;
   
   for (ndx = 0; ndx < LINE_SIZE && ndx < strlen(input); ndx++)
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	f9 f0       	breq	.+62     	; 0x44e <getLine+0x60>
 410:	dc 01       	movw	r26, r24
 412:	af 01       	movw	r20, r30
 414:	ef ef       	ldi	r30, 0xFF	; 255
 416:	ff ef       	ldi	r31, 0xFF	; 255
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
      if(input[ndx] == ' ')
 41c:	9d 91       	ld	r25, X+
 41e:	90 32       	cpi	r25, 0x20	; 32
 420:	09 f4       	brne	.+2      	; 0x424 <getLine+0x36>
 422:	f9 01       	movw	r30, r18
   int ndx, lastSpace = -1;
   
   if (!input || strlen(input) < LINE_SIZE)
      return input;
   
   for (ndx = 0; ndx < LINE_SIZE && ndx < strlen(input); ndx++)
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	21 31       	cpi	r18, 0x11	; 17
 42a:	31 05       	cpc	r19, r1
 42c:	19 f0       	breq	.+6      	; 0x434 <getLine+0x46>
 42e:	24 17       	cp	r18, r20
 430:	35 07       	cpc	r19, r21
 432:	a1 f7       	brne	.-24     	; 0x41c <getLine+0x2e>
      if(input[ndx] == ' ')
         lastSpace = ndx;
   
   if (lastSpace >=0) {
 434:	ff 23       	and	r31, r31
 436:	5c f0       	brlt	.+22     	; 0x44e <getLine+0x60>
      input[lastSpace] = '\0';
 438:	de 01       	movw	r26, r28
 43a:	ae 0f       	add	r26, r30
 43c:	bf 1f       	adc	r27, r31
 43e:	1c 92       	st	X, r1
      line = input;
      *extra = input + lastSpace + 1;
 440:	31 96       	adiw	r30, 0x01	; 1
 442:	ec 0f       	add	r30, r28
 444:	fd 1f       	adc	r31, r29
 446:	db 01       	movw	r26, r22
 448:	ed 93       	st	X+, r30
 44a:	fc 93       	st	X, r31
 44c:	05 c0       	rjmp	.+10     	; 0x458 <getLine+0x6a>
   }
   else
      *extra = input;
 44e:	fb 01       	movw	r30, r22
 450:	d1 83       	std	Z+1, r29	; 0x01
 452:	c0 83       	st	Z, r28
#include <stdlib.h>

#define LINE_SIZE 17

char *getLine(char *input, char **extra) {
   char *line = NULL;
 454:	c0 e0       	ldi	r28, 0x00	; 0
 456:	d0 e0       	ldi	r29, 0x00	; 0
   }
   else
      *extra = input;
   
   return line;
}
 458:	ce 01       	movw	r24, r28
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <__subsf3>:
 460:	50 58       	subi	r21, 0x80	; 128

00000462 <__addsf3>:
 462:	bb 27       	eor	r27, r27
 464:	aa 27       	eor	r26, r26
 466:	0e 94 48 02 	call	0x490	; 0x490 <__addsf3x>
 46a:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_round>
 46e:	0e 94 84 03 	call	0x708	; 0x708 <__fp_pscA>
 472:	38 f0       	brcs	.+14     	; 0x482 <__addsf3+0x20>
 474:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_pscB>
 478:	20 f0       	brcs	.+8      	; 0x482 <__addsf3+0x20>
 47a:	39 f4       	brne	.+14     	; 0x48a <__addsf3+0x28>
 47c:	9f 3f       	cpi	r25, 0xFF	; 255
 47e:	19 f4       	brne	.+6      	; 0x486 <__addsf3+0x24>
 480:	26 f4       	brtc	.+8      	; 0x48a <__addsf3+0x28>
 482:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_nan>
 486:	0e f4       	brtc	.+2      	; 0x48a <__addsf3+0x28>
 488:	e0 95       	com	r30
 48a:	e7 fb       	bst	r30, 7
 48c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>

00000490 <__addsf3x>:
 490:	e9 2f       	mov	r30, r25
 492:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_split3>
 496:	58 f3       	brcs	.-42     	; 0x46e <__addsf3+0xc>
 498:	ba 17       	cp	r27, r26
 49a:	62 07       	cpc	r22, r18
 49c:	73 07       	cpc	r23, r19
 49e:	84 07       	cpc	r24, r20
 4a0:	95 07       	cpc	r25, r21
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <__addsf3x+0x1c>
 4a4:	79 f4       	brne	.+30     	; 0x4c4 <__addsf3x+0x34>
 4a6:	a6 f5       	brtc	.+104    	; 0x510 <__addsf3x+0x80>
 4a8:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_zero>
 4ac:	0e f4       	brtc	.+2      	; 0x4b0 <__addsf3x+0x20>
 4ae:	e0 95       	com	r30
 4b0:	0b 2e       	mov	r0, r27
 4b2:	ba 2f       	mov	r27, r26
 4b4:	a0 2d       	mov	r26, r0
 4b6:	0b 01       	movw	r0, r22
 4b8:	b9 01       	movw	r22, r18
 4ba:	90 01       	movw	r18, r0
 4bc:	0c 01       	movw	r0, r24
 4be:	ca 01       	movw	r24, r20
 4c0:	a0 01       	movw	r20, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	ff 27       	eor	r31, r31
 4c6:	59 1b       	sub	r21, r25
 4c8:	99 f0       	breq	.+38     	; 0x4f0 <__addsf3x+0x60>
 4ca:	59 3f       	cpi	r21, 0xF9	; 249
 4cc:	50 f4       	brcc	.+20     	; 0x4e2 <__addsf3x+0x52>
 4ce:	50 3e       	cpi	r21, 0xE0	; 224
 4d0:	68 f1       	brcs	.+90     	; 0x52c <__addsf3x+0x9c>
 4d2:	1a 16       	cp	r1, r26
 4d4:	f0 40       	sbci	r31, 0x00	; 0
 4d6:	a2 2f       	mov	r26, r18
 4d8:	23 2f       	mov	r18, r19
 4da:	34 2f       	mov	r19, r20
 4dc:	44 27       	eor	r20, r20
 4de:	58 5f       	subi	r21, 0xF8	; 248
 4e0:	f3 cf       	rjmp	.-26     	; 0x4c8 <__addsf3x+0x38>
 4e2:	46 95       	lsr	r20
 4e4:	37 95       	ror	r19
 4e6:	27 95       	ror	r18
 4e8:	a7 95       	ror	r26
 4ea:	f0 40       	sbci	r31, 0x00	; 0
 4ec:	53 95       	inc	r21
 4ee:	c9 f7       	brne	.-14     	; 0x4e2 <__addsf3x+0x52>
 4f0:	7e f4       	brtc	.+30     	; 0x510 <__addsf3x+0x80>
 4f2:	1f 16       	cp	r1, r31
 4f4:	ba 0b       	sbc	r27, r26
 4f6:	62 0b       	sbc	r22, r18
 4f8:	73 0b       	sbc	r23, r19
 4fa:	84 0b       	sbc	r24, r20
 4fc:	ba f0       	brmi	.+46     	; 0x52c <__addsf3x+0x9c>
 4fe:	91 50       	subi	r25, 0x01	; 1
 500:	a1 f0       	breq	.+40     	; 0x52a <__addsf3x+0x9a>
 502:	ff 0f       	add	r31, r31
 504:	bb 1f       	adc	r27, r27
 506:	66 1f       	adc	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	c2 f7       	brpl	.-16     	; 0x4fe <__addsf3x+0x6e>
 50e:	0e c0       	rjmp	.+28     	; 0x52c <__addsf3x+0x9c>
 510:	ba 0f       	add	r27, r26
 512:	62 1f       	adc	r22, r18
 514:	73 1f       	adc	r23, r19
 516:	84 1f       	adc	r24, r20
 518:	48 f4       	brcc	.+18     	; 0x52c <__addsf3x+0x9c>
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f7 95       	ror	r31
 524:	9e 3f       	cpi	r25, 0xFE	; 254
 526:	08 f0       	brcs	.+2      	; 0x52a <__addsf3x+0x9a>
 528:	b0 cf       	rjmp	.-160    	; 0x48a <__addsf3+0x28>
 52a:	93 95       	inc	r25
 52c:	88 0f       	add	r24, r24
 52e:	08 f0       	brcs	.+2      	; 0x532 <__addsf3x+0xa2>
 530:	99 27       	eor	r25, r25
 532:	ee 0f       	add	r30, r30
 534:	97 95       	ror	r25
 536:	87 95       	ror	r24
 538:	08 95       	ret

0000053a <__divsf3>:
 53a:	0e 94 b1 02 	call	0x562	; 0x562 <__divsf3x>
 53e:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_round>
 542:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_pscB>
 546:	58 f0       	brcs	.+22     	; 0x55e <__divsf3+0x24>
 548:	0e 94 84 03 	call	0x708	; 0x708 <__fp_pscA>
 54c:	40 f0       	brcs	.+16     	; 0x55e <__divsf3+0x24>
 54e:	29 f4       	brne	.+10     	; 0x55a <__divsf3+0x20>
 550:	5f 3f       	cpi	r21, 0xFF	; 255
 552:	29 f0       	breq	.+10     	; 0x55e <__divsf3+0x24>
 554:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 558:	51 11       	cpse	r21, r1
 55a:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>
 55e:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_nan>

00000562 <__divsf3x>:
 562:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_split3>
 566:	68 f3       	brcs	.-38     	; 0x542 <__divsf3+0x8>

00000568 <__divsf3_pse>:
 568:	99 23       	and	r25, r25
 56a:	b1 f3       	breq	.-20     	; 0x558 <__divsf3+0x1e>
 56c:	55 23       	and	r21, r21
 56e:	91 f3       	breq	.-28     	; 0x554 <__divsf3+0x1a>
 570:	95 1b       	sub	r25, r21
 572:	55 0b       	sbc	r21, r21
 574:	bb 27       	eor	r27, r27
 576:	aa 27       	eor	r26, r26
 578:	62 17       	cp	r22, r18
 57a:	73 07       	cpc	r23, r19
 57c:	84 07       	cpc	r24, r20
 57e:	38 f0       	brcs	.+14     	; 0x58e <__divsf3_pse+0x26>
 580:	9f 5f       	subi	r25, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	44 1f       	adc	r20, r20
 58a:	aa 1f       	adc	r26, r26
 58c:	a9 f3       	breq	.-22     	; 0x578 <__divsf3_pse+0x10>
 58e:	35 d0       	rcall	.+106    	; 0x5fa <__divsf3_pse+0x92>
 590:	0e 2e       	mov	r0, r30
 592:	3a f0       	brmi	.+14     	; 0x5a2 <__divsf3_pse+0x3a>
 594:	e0 e8       	ldi	r30, 0x80	; 128
 596:	32 d0       	rcall	.+100    	; 0x5fc <__divsf3_pse+0x94>
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	e6 95       	lsr	r30
 59e:	00 1c       	adc	r0, r0
 5a0:	ca f7       	brpl	.-14     	; 0x594 <__divsf3_pse+0x2c>
 5a2:	2b d0       	rcall	.+86     	; 0x5fa <__divsf3_pse+0x92>
 5a4:	fe 2f       	mov	r31, r30
 5a6:	29 d0       	rcall	.+82     	; 0x5fa <__divsf3_pse+0x92>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	bb 1f       	adc	r27, r27
 5b0:	26 17       	cp	r18, r22
 5b2:	37 07       	cpc	r19, r23
 5b4:	48 07       	cpc	r20, r24
 5b6:	ab 07       	cpc	r26, r27
 5b8:	b0 e8       	ldi	r27, 0x80	; 128
 5ba:	09 f0       	breq	.+2      	; 0x5be <__divsf3_pse+0x56>
 5bc:	bb 0b       	sbc	r27, r27
 5be:	80 2d       	mov	r24, r0
 5c0:	bf 01       	movw	r22, r30
 5c2:	ff 27       	eor	r31, r31
 5c4:	93 58       	subi	r25, 0x83	; 131
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	3a f0       	brmi	.+14     	; 0x5d8 <__divsf3_pse+0x70>
 5ca:	9e 3f       	cpi	r25, 0xFE	; 254
 5cc:	51 05       	cpc	r21, r1
 5ce:	78 f0       	brcs	.+30     	; 0x5ee <__divsf3_pse+0x86>
 5d0:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 5d4:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	e4 f3       	brlt	.-8      	; 0x5d4 <__divsf3_pse+0x6c>
 5dc:	98 3e       	cpi	r25, 0xE8	; 232
 5de:	d4 f3       	brlt	.-12     	; 0x5d4 <__divsf3_pse+0x6c>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f7 95       	ror	r31
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <__divsf3_pse+0x78>
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	bb 1f       	adc	r27, r27
 604:	62 17       	cp	r22, r18
 606:	73 07       	cpc	r23, r19
 608:	84 07       	cpc	r24, r20
 60a:	ba 07       	cpc	r27, r26
 60c:	20 f0       	brcs	.+8      	; 0x616 <__divsf3_pse+0xae>
 60e:	62 1b       	sub	r22, r18
 610:	73 0b       	sbc	r23, r19
 612:	84 0b       	sbc	r24, r20
 614:	ba 0b       	sbc	r27, r26
 616:	ee 1f       	adc	r30, r30
 618:	88 f7       	brcc	.-30     	; 0x5fc <__divsf3_pse+0x94>
 61a:	e0 95       	com	r30
 61c:	08 95       	ret

0000061e <__fixunssfsi>:
 61e:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_splitA>
 622:	88 f0       	brcs	.+34     	; 0x646 <__fixunssfsi+0x28>
 624:	9f 57       	subi	r25, 0x7F	; 127
 626:	98 f0       	brcs	.+38     	; 0x64e <__fixunssfsi+0x30>
 628:	b9 2f       	mov	r27, r25
 62a:	99 27       	eor	r25, r25
 62c:	b7 51       	subi	r27, 0x17	; 23
 62e:	b0 f0       	brcs	.+44     	; 0x65c <__fixunssfsi+0x3e>
 630:	e1 f0       	breq	.+56     	; 0x66a <__fixunssfsi+0x4c>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	1a f0       	brmi	.+6      	; 0x642 <__fixunssfsi+0x24>
 63c:	ba 95       	dec	r27
 63e:	c9 f7       	brne	.-14     	; 0x632 <__fixunssfsi+0x14>
 640:	14 c0       	rjmp	.+40     	; 0x66a <__fixunssfsi+0x4c>
 642:	b1 30       	cpi	r27, 0x01	; 1
 644:	91 f0       	breq	.+36     	; 0x66a <__fixunssfsi+0x4c>
 646:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_zero>
 64a:	b1 e0       	ldi	r27, 0x01	; 1
 64c:	08 95       	ret
 64e:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_zero>
 652:	67 2f       	mov	r22, r23
 654:	78 2f       	mov	r23, r24
 656:	88 27       	eor	r24, r24
 658:	b8 5f       	subi	r27, 0xF8	; 248
 65a:	39 f0       	breq	.+14     	; 0x66a <__fixunssfsi+0x4c>
 65c:	b9 3f       	cpi	r27, 0xF9	; 249
 65e:	cc f3       	brlt	.-14     	; 0x652 <__fixunssfsi+0x34>
 660:	86 95       	lsr	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b3 95       	inc	r27
 668:	d9 f7       	brne	.-10     	; 0x660 <__fixunssfsi+0x42>
 66a:	3e f4       	brtc	.+14     	; 0x67a <__fixunssfsi+0x5c>
 66c:	90 95       	com	r25
 66e:	80 95       	com	r24
 670:	70 95       	com	r23
 672:	61 95       	neg	r22
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__floatunsisf>:
 67c:	e8 94       	clt
 67e:	09 c0       	rjmp	.+18     	; 0x692 <__floatsisf+0x12>

00000680 <__floatsisf>:
 680:	97 fb       	bst	r25, 7
 682:	3e f4       	brtc	.+14     	; 0x692 <__floatsisf+0x12>
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	99 23       	and	r25, r25
 694:	a9 f0       	breq	.+42     	; 0x6c0 <__floatsisf+0x40>
 696:	f9 2f       	mov	r31, r25
 698:	96 e9       	ldi	r25, 0x96	; 150
 69a:	bb 27       	eor	r27, r27
 69c:	93 95       	inc	r25
 69e:	f6 95       	lsr	r31
 6a0:	87 95       	ror	r24
 6a2:	77 95       	ror	r23
 6a4:	67 95       	ror	r22
 6a6:	b7 95       	ror	r27
 6a8:	f1 11       	cpse	r31, r1
 6aa:	f8 cf       	rjmp	.-16     	; 0x69c <__floatsisf+0x1c>
 6ac:	fa f4       	brpl	.+62     	; 0x6ec <__floatsisf+0x6c>
 6ae:	bb 0f       	add	r27, r27
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__floatsisf+0x36>
 6b2:	60 ff       	sbrs	r22, 0
 6b4:	1b c0       	rjmp	.+54     	; 0x6ec <__floatsisf+0x6c>
 6b6:	6f 5f       	subi	r22, 0xFF	; 255
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	16 c0       	rjmp	.+44     	; 0x6ec <__floatsisf+0x6c>
 6c0:	88 23       	and	r24, r24
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <__floatsisf+0x48>
 6c4:	96 e9       	ldi	r25, 0x96	; 150
 6c6:	11 c0       	rjmp	.+34     	; 0x6ea <__floatsisf+0x6a>
 6c8:	77 23       	and	r23, r23
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <__floatsisf+0x54>
 6cc:	9e e8       	ldi	r25, 0x8E	; 142
 6ce:	87 2f       	mov	r24, r23
 6d0:	76 2f       	mov	r23, r22
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__floatsisf+0x5e>
 6d4:	66 23       	and	r22, r22
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <__floatsisf+0x74>
 6d8:	96 e8       	ldi	r25, 0x86	; 134
 6da:	86 2f       	mov	r24, r22
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	2a f0       	brmi	.+10     	; 0x6ec <__floatsisf+0x6c>
 6e2:	9a 95       	dec	r25
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	da f7       	brpl	.-10     	; 0x6e2 <__floatsisf+0x62>
 6ec:	88 0f       	add	r24, r24
 6ee:	96 95       	lsr	r25
 6f0:	87 95       	ror	r24
 6f2:	97 f9       	bld	r25, 7
 6f4:	08 95       	ret

000006f6 <__fp_inf>:
 6f6:	97 f9       	bld	r25, 7
 6f8:	9f 67       	ori	r25, 0x7F	; 127
 6fa:	80 e8       	ldi	r24, 0x80	; 128
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	08 95       	ret

00000702 <__fp_nan>:
 702:	9f ef       	ldi	r25, 0xFF	; 255
 704:	80 ec       	ldi	r24, 0xC0	; 192
 706:	08 95       	ret

00000708 <__fp_pscA>:
 708:	00 24       	eor	r0, r0
 70a:	0a 94       	dec	r0
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	18 06       	cpc	r1, r24
 712:	09 06       	cpc	r0, r25
 714:	08 95       	ret

00000716 <__fp_pscB>:
 716:	00 24       	eor	r0, r0
 718:	0a 94       	dec	r0
 71a:	12 16       	cp	r1, r18
 71c:	13 06       	cpc	r1, r19
 71e:	14 06       	cpc	r1, r20
 720:	05 06       	cpc	r0, r21
 722:	08 95       	ret

00000724 <__fp_round>:
 724:	09 2e       	mov	r0, r25
 726:	03 94       	inc	r0
 728:	00 0c       	add	r0, r0
 72a:	11 f4       	brne	.+4      	; 0x730 <__fp_round+0xc>
 72c:	88 23       	and	r24, r24
 72e:	52 f0       	brmi	.+20     	; 0x744 <__fp_round+0x20>
 730:	bb 0f       	add	r27, r27
 732:	40 f4       	brcc	.+16     	; 0x744 <__fp_round+0x20>
 734:	bf 2b       	or	r27, r31
 736:	11 f4       	brne	.+4      	; 0x73c <__fp_round+0x18>
 738:	60 ff       	sbrs	r22, 0
 73a:	04 c0       	rjmp	.+8      	; 0x744 <__fp_round+0x20>
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__fp_split3>:
 746:	57 fd       	sbrc	r21, 7
 748:	90 58       	subi	r25, 0x80	; 128
 74a:	44 0f       	add	r20, r20
 74c:	55 1f       	adc	r21, r21
 74e:	59 f0       	breq	.+22     	; 0x766 <__fp_splitA+0x10>
 750:	5f 3f       	cpi	r21, 0xFF	; 255
 752:	71 f0       	breq	.+28     	; 0x770 <__fp_splitA+0x1a>
 754:	47 95       	ror	r20

00000756 <__fp_splitA>:
 756:	88 0f       	add	r24, r24
 758:	97 fb       	bst	r25, 7
 75a:	99 1f       	adc	r25, r25
 75c:	61 f0       	breq	.+24     	; 0x776 <__fp_splitA+0x20>
 75e:	9f 3f       	cpi	r25, 0xFF	; 255
 760:	79 f0       	breq	.+30     	; 0x780 <__fp_splitA+0x2a>
 762:	87 95       	ror	r24
 764:	08 95       	ret
 766:	12 16       	cp	r1, r18
 768:	13 06       	cpc	r1, r19
 76a:	14 06       	cpc	r1, r20
 76c:	55 1f       	adc	r21, r21
 76e:	f2 cf       	rjmp	.-28     	; 0x754 <__fp_split3+0xe>
 770:	46 95       	lsr	r20
 772:	f1 df       	rcall	.-30     	; 0x756 <__fp_splitA>
 774:	08 c0       	rjmp	.+16     	; 0x786 <__fp_splitA+0x30>
 776:	16 16       	cp	r1, r22
 778:	17 06       	cpc	r1, r23
 77a:	18 06       	cpc	r1, r24
 77c:	99 1f       	adc	r25, r25
 77e:	f1 cf       	rjmp	.-30     	; 0x762 <__fp_splitA+0xc>
 780:	86 95       	lsr	r24
 782:	71 05       	cpc	r23, r1
 784:	61 05       	cpc	r22, r1
 786:	08 94       	sec
 788:	08 95       	ret

0000078a <__fp_zero>:
 78a:	e8 94       	clt

0000078c <__fp_szero>:
 78c:	bb 27       	eor	r27, r27
 78e:	66 27       	eor	r22, r22
 790:	77 27       	eor	r23, r23
 792:	cb 01       	movw	r24, r22
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__mulsf3>:
 798:	0e 94 df 03 	call	0x7be	; 0x7be <__mulsf3x>
 79c:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_round>
 7a0:	0e 94 84 03 	call	0x708	; 0x708 <__fp_pscA>
 7a4:	38 f0       	brcs	.+14     	; 0x7b4 <__mulsf3+0x1c>
 7a6:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_pscB>
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__mulsf3+0x1c>
 7ac:	95 23       	and	r25, r21
 7ae:	11 f0       	breq	.+4      	; 0x7b4 <__mulsf3+0x1c>
 7b0:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 7b4:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_nan>
 7b8:	11 24       	eor	r1, r1
 7ba:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>

000007be <__mulsf3x>:
 7be:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_split3>
 7c2:	70 f3       	brcs	.-36     	; 0x7a0 <__mulsf3+0x8>

000007c4 <__mulsf3_pse>:
 7c4:	95 9f       	mul	r25, r21
 7c6:	c1 f3       	breq	.-16     	; 0x7b8 <__mulsf3+0x20>
 7c8:	95 0f       	add	r25, r21
 7ca:	50 e0       	ldi	r21, 0x00	; 0
 7cc:	55 1f       	adc	r21, r21
 7ce:	62 9f       	mul	r22, r18
 7d0:	f0 01       	movw	r30, r0
 7d2:	72 9f       	mul	r23, r18
 7d4:	bb 27       	eor	r27, r27
 7d6:	f0 0d       	add	r31, r0
 7d8:	b1 1d       	adc	r27, r1
 7da:	63 9f       	mul	r22, r19
 7dc:	aa 27       	eor	r26, r26
 7de:	f0 0d       	add	r31, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	aa 1f       	adc	r26, r26
 7e4:	64 9f       	mul	r22, r20
 7e6:	66 27       	eor	r22, r22
 7e8:	b0 0d       	add	r27, r0
 7ea:	a1 1d       	adc	r26, r1
 7ec:	66 1f       	adc	r22, r22
 7ee:	82 9f       	mul	r24, r18
 7f0:	22 27       	eor	r18, r18
 7f2:	b0 0d       	add	r27, r0
 7f4:	a1 1d       	adc	r26, r1
 7f6:	62 1f       	adc	r22, r18
 7f8:	73 9f       	mul	r23, r19
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	62 1f       	adc	r22, r18
 800:	83 9f       	mul	r24, r19
 802:	a0 0d       	add	r26, r0
 804:	61 1d       	adc	r22, r1
 806:	22 1f       	adc	r18, r18
 808:	74 9f       	mul	r23, r20
 80a:	33 27       	eor	r19, r19
 80c:	a0 0d       	add	r26, r0
 80e:	61 1d       	adc	r22, r1
 810:	23 1f       	adc	r18, r19
 812:	84 9f       	mul	r24, r20
 814:	60 0d       	add	r22, r0
 816:	21 1d       	adc	r18, r1
 818:	82 2f       	mov	r24, r18
 81a:	76 2f       	mov	r23, r22
 81c:	6a 2f       	mov	r22, r26
 81e:	11 24       	eor	r1, r1
 820:	9f 57       	subi	r25, 0x7F	; 127
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	9a f0       	brmi	.+38     	; 0x84c <__mulsf3_pse+0x88>
 826:	f1 f0       	breq	.+60     	; 0x864 <__mulsf3_pse+0xa0>
 828:	88 23       	and	r24, r24
 82a:	4a f0       	brmi	.+18     	; 0x83e <__mulsf3_pse+0x7a>
 82c:	ee 0f       	add	r30, r30
 82e:	ff 1f       	adc	r31, r31
 830:	bb 1f       	adc	r27, r27
 832:	66 1f       	adc	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	91 50       	subi	r25, 0x01	; 1
 83a:	50 40       	sbci	r21, 0x00	; 0
 83c:	a9 f7       	brne	.-22     	; 0x828 <__mulsf3_pse+0x64>
 83e:	9e 3f       	cpi	r25, 0xFE	; 254
 840:	51 05       	cpc	r21, r1
 842:	80 f0       	brcs	.+32     	; 0x864 <__mulsf3_pse+0xa0>
 844:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 848:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>
 84c:	5f 3f       	cpi	r21, 0xFF	; 255
 84e:	e4 f3       	brlt	.-8      	; 0x848 <__mulsf3_pse+0x84>
 850:	98 3e       	cpi	r25, 0xE8	; 232
 852:	d4 f3       	brlt	.-12     	; 0x848 <__mulsf3_pse+0x84>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f7 95       	ror	r31
 85e:	e7 95       	ror	r30
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	c1 f7       	brne	.-16     	; 0x854 <__mulsf3_pse+0x90>
 864:	fe 2b       	or	r31, r30
 866:	88 0f       	add	r24, r24
 868:	91 1d       	adc	r25, r1
 86a:	96 95       	lsr	r25
 86c:	87 95       	ror	r24
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret

00000872 <__divmodsi4>:
 872:	05 2e       	mov	r0, r21
 874:	97 fb       	bst	r25, 7
 876:	1e f4       	brtc	.+6      	; 0x87e <__divmodsi4+0xc>
 878:	00 94       	com	r0
 87a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__negsi2>
 87e:	57 fd       	sbrc	r21, 7
 880:	07 d0       	rcall	.+14     	; 0x890 <__divmodsi4_neg2>
 882:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__udivmodsi4>
 886:	07 fc       	sbrc	r0, 7
 888:	03 d0       	rcall	.+6      	; 0x890 <__divmodsi4_neg2>
 88a:	4e f4       	brtc	.+18     	; 0x89e <__divmodsi4_exit>
 88c:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__negsi2>

00000890 <__divmodsi4_neg2>:
 890:	50 95       	com	r21
 892:	40 95       	com	r20
 894:	30 95       	com	r19
 896:	21 95       	neg	r18
 898:	3f 4f       	sbci	r19, 0xFF	; 255
 89a:	4f 4f       	sbci	r20, 0xFF	; 255
 89c:	5f 4f       	sbci	r21, 0xFF	; 255

0000089e <__divmodsi4_exit>:
 89e:	08 95       	ret

000008a0 <__negsi2>:
 8a0:	90 95       	com	r25
 8a2:	80 95       	com	r24
 8a4:	70 95       	com	r23
 8a6:	61 95       	neg	r22
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	08 95       	ret

000008b0 <__udivmodsi4>:
 8b0:	a1 e2       	ldi	r26, 0x21	; 33
 8b2:	1a 2e       	mov	r1, r26
 8b4:	aa 1b       	sub	r26, r26
 8b6:	bb 1b       	sub	r27, r27
 8b8:	fd 01       	movw	r30, r26
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <__udivmodsi4_ep>

000008bc <__udivmodsi4_loop>:
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	ee 1f       	adc	r30, r30
 8c2:	ff 1f       	adc	r31, r31
 8c4:	a2 17       	cp	r26, r18
 8c6:	b3 07       	cpc	r27, r19
 8c8:	e4 07       	cpc	r30, r20
 8ca:	f5 07       	cpc	r31, r21
 8cc:	20 f0       	brcs	.+8      	; 0x8d6 <__udivmodsi4_ep>
 8ce:	a2 1b       	sub	r26, r18
 8d0:	b3 0b       	sbc	r27, r19
 8d2:	e4 0b       	sbc	r30, r20
 8d4:	f5 0b       	sbc	r31, r21

000008d6 <__udivmodsi4_ep>:
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	1a 94       	dec	r1
 8e0:	69 f7       	brne	.-38     	; 0x8bc <__udivmodsi4_loop>
 8e2:	60 95       	com	r22
 8e4:	70 95       	com	r23
 8e6:	80 95       	com	r24
 8e8:	90 95       	com	r25
 8ea:	9b 01       	movw	r18, r22
 8ec:	ac 01       	movw	r20, r24
 8ee:	bd 01       	movw	r22, r26
 8f0:	cf 01       	movw	r24, r30
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
