
LCD_project1_Git.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000002f8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008df  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000031b  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a2  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063e  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 24 01 	call	0x248	; 0x248 <main>
  9e:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_cmd>:
	return 1;
}

// runs pins and delays to send LCD a command 
void lcd_write_cmd(char command){
	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	98 7f       	andi	r25, 0xF8	; 248
  aa:	95 b9       	out	0x05, r25	; 5
	PORTD = command;		// set command
  ac:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000100;	// E, RW, RS = 1,0,0
  ae:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	87 ec       	ldi	r24, 0xC7	; 199
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_write_cmd+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_write_cmd+0x1a>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <lcd_initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	85 eb       	ldi	r24, 0xB5	; 181
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <lcd_initialize+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_initialize+0x10>
  d4:	00 00       	nop
}

// runs LCD initialization code
void lcd_initialize(){
	_delay_ms(35);					// power ON delay > 30ms
	lcd_write_cmd(func_set);		// run function set
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_initialize+0x1c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_initialize+0x22>
  e6:	00 00       	nop
	_delay_us(std_delay);			// delay > 50us
	lcd_write_cmd(disp_ctrl);		// run display set (off)
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
  ee:	87 ec       	ldi	r24, 0xC7	; 199
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_initialize+0x2e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_initialize+0x34>
  f8:	00 00       	nop
	_delay_us(std_delay);			// delay > 50us
	lcd_write_cmd(disp_clear);		// run clear display
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_initialize+0x40>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_initialize+0x46>
 10a:	00 00       	nop
	_delay_ms(2);					// delay > 1.5 ms
	lcd_write_cmd(entry_mode);		// set entry mode
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	87 ec       	ldi	r24, 0xC7	; 199
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_initialize+0x52>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_initialize+0x58>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <lcd_write_char>:
	_delay_us(std_delay);			// delay > 50us
}

//  runs pins and delays to have LCD print characters 
void lcd_write_char(char character){
	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
 120:	95 b1       	in	r25, 0x05	; 5
 122:	98 7f       	andi	r25, 0xF8	; 248
 124:	95 b9       	out	0x05, r25	; 5
	PORTD = character;		// send character
 126:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0b00000101;	// E, RW, RS = 1,0,1
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	85 60       	ori	r24, 0x05	; 5
 12c:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	85 b9       	out	0x05, r24	; 5
 134:	87 ec       	ldi	r24, 0xC7	; 199
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_write_char+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_write_char+0x1e>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <check_buttons>:
}

// check which (if any) buttons are pressed
uint8_t check_buttons(){
	// if pin12 (left) button is pressed
	if(~PINB & 0b00010000){
 142:	1c 99       	sbic	0x03, 4	; 3
 144:	0b c0       	rjmp	.+22     	; 0x15c <check_buttons+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <check_buttons+0xa>
 154:	00 c0       	rjmp	.+0      	; 0x156 <check_buttons+0x14>
 156:	00 00       	nop
		_delay_ms(debounce);
		return left_button;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	08 95       	ret
	}
	// if pin11 (right) button is pressed
	else if(~PINB & 0b00001000){
 15c:	1b 99       	sbic	0x03, 3	; 3
 15e:	0b c0       	rjmp	.+22     	; 0x176 <check_buttons+0x34>
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	81 ee       	ldi	r24, 0xE1	; 225
 164:	94 e0       	ldi	r25, 0x04	; 4
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <check_buttons+0x24>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <check_buttons+0x2e>
 170:	00 00       	nop
		_delay_ms(debounce);
		return right_button;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret
	}
	// if no button is pressed
	else
		return 0;
 176:	80 e0       	ldi	r24, 0x00	; 0
}
 178:	08 95       	ret

0000017a <lcd_print_string>:

// prints string of characters to LCD
void lcd_print_string(char string[]){
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <lcd_print_string+0x12>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	_delay_us(std_delay);
}
 */
	
	char *line1, *line2, *extra;
   line1 = getLine(string, &extra);
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	0e 94 41 01 	call	0x282	; 0x282 <getLine>
 19a:	7c 01       	movw	r14, r24
 19c:	6c 01       	movw	r12, r24
   
	// print top line
	for(int i=0; i<strlen(line1); i++){
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <lcd_print_string+0x44>
		lcd_write_char(line1[i]);
 1a4:	f6 01       	movw	r30, r12
 1a6:	81 91       	ld	r24, Z+
 1a8:	6f 01       	movw	r12, r30
 1aa:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	87 ec       	ldi	r24, 0xC7	; 199
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_print_string+0x38>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_print_string+0x3e>
 1b8:	00 00       	nop
	
	char *line1, *line2, *extra;
   line1 = getLine(string, &extra);
   
	// print top line
	for(int i=0; i<strlen(line1); i++){
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	f7 01       	movw	r30, r14
 1c0:	01 90       	ld	r0, Z+
 1c2:	00 20       	and	r0, r0
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <lcd_print_string+0x46>
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	ee 19       	sub	r30, r14
 1ca:	ff 09       	sbc	r31, r15
 1cc:	0e 17       	cp	r16, r30
 1ce:	1f 07       	cpc	r17, r31
 1d0:	48 f3       	brcs	.-46     	; 0x1a4 <lcd_print_string+0x2a>
		lcd_write_char(line1[i]);
		_delay_us(std_delay);
	}
	
	// set cursor to beginning of line 2
	lcd_write_cmd(set_line2);
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
   string = extra;
   line2 = getLine(string, &extra);
 1d8:	be 01       	movw	r22, r28
 1da:	6f 5f       	subi	r22, 0xFF	; 255
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	0e 94 41 01 	call	0x282	; 0x282 <getLine>
 1e6:	7c 01       	movw	r14, r24
 1e8:	6c 01       	movw	r12, r24
	
	// print bottom line 
	for(int j=0; j<strlen(line2); j++){
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <lcd_print_string+0x90>
		lcd_write_char(line2[j]);
 1f0:	f6 01       	movw	r30, r12
 1f2:	81 91       	ld	r24, Z+
 1f4:	6f 01       	movw	r12, r30
 1f6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_write_char>
 1fa:	87 ec       	ldi	r24, 0xC7	; 199
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_print_string+0x84>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_print_string+0x8a>
 204:	00 00       	nop
	lcd_write_cmd(set_line2);
   string = extra;
   line2 = getLine(string, &extra);
	
	// print bottom line 
	for(int j=0; j<strlen(line2); j++){
 206:	0f 5f       	subi	r16, 0xFF	; 255
 208:	1f 4f       	sbci	r17, 0xFF	; 255
 20a:	f7 01       	movw	r30, r14
 20c:	01 90       	ld	r0, Z+
 20e:	00 20       	and	r0, r0
 210:	e9 f7       	brne	.-6      	; 0x20c <lcd_print_string+0x92>
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	ee 19       	sub	r30, r14
 216:	ff 09       	sbc	r31, r15
 218:	0e 17       	cp	r16, r30
 21a:	1f 07       	cpc	r17, r31
 21c:	48 f3       	brcs	.-46     	; 0x1f0 <lcd_print_string+0x76>
		lcd_write_char(line2[j]);
		_delay_us(std_delay);
	}

}
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	08 95       	ret

00000234 <clear_display>:

void clear_display(){
	lcd_write_cmd(disp_clear);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9f e1       	ldi	r25, 0x1F	; 31
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <clear_display+0xa>
 242:	00 c0       	rjmp	.+0      	; 0x244 <clear_display+0x10>
 244:	00 00       	nop
 246:	08 95       	ret

00000248 <main>:
void clear_display(); 
uint8_t check_buttons(); 

int main(void)
{
	UCSR0B = 0;				// allows atmel to R/W to pins 0 and 1
 248:	10 92 c1 00 	sts	0x00C1, r1
	DDRB = 0b00100111;		// Pin11-12 = Input; E, RW, RS, PIN13 = output
 24c:	87 e2       	ldi	r24, 0x27	; 39
 24e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;		// DB(7-0) = output	
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= 0b00011000;	// set internal pull-ups @ pin11/12
 254:	85 b1       	in	r24, 0x05	; 5
 256:	88 61       	ori	r24, 0x18	; 24
 258:	85 b9       	out	0x05, r24	; 5
	
	//initialize LCD
	lcd_initialize();
 25a:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_initialize>
	
	// print to the LCD
	lcd_print_string("Hello World!... Goodbye and I");
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_print_string>
	
	while(1){
		// if a button is pressed
		if(check_buttons()){
 266:	0e 94 a1 00 	call	0x142	; 0x142 <check_buttons>
 26a:	88 23       	and	r24, r24
 26c:	41 f0       	breq	.+16     	; 0x27e <main+0x36>
			PORTB |= 0b00100000;	// turn on led
 26e:	2d 9a       	sbi	0x05, 5	; 5
			clear_display();
 270:	0e 94 1a 01 	call	0x234	; 0x234 <clear_display>
			lcd_print_string("I like big buttsss and I can not lie!");
 274:	8e e1       	ldi	r24, 0x1E	; 30
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_print_string>
 27c:	f4 cf       	rjmp	.-24     	; 0x266 <main+0x1e>
		}
		else
			PORTB &= 0b11011111;	// turn off led
 27e:	2d 98       	cbi	0x05, 5	; 5
 280:	f2 cf       	rjmp	.-28     	; 0x266 <main+0x1e>

00000282 <getLine>:
#include <String.h>
#include <stdlib.h>

#define LINE_SIZE 17

char *getLine(char *input, char **extra) {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
   char *line = NULL;
   int ndx, lastSpace = -1;
   
   if (!input || strlen(input) < LINE_SIZE)
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	81 f1       	breq	.+96     	; 0x2ec <getLine+0x6a>
 28c:	fc 01       	movw	r30, r24
 28e:	01 90       	ld	r0, Z+
 290:	00 20       	and	r0, r0
 292:	e9 f7       	brne	.-6      	; 0x28e <getLine+0xc>
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	e8 1b       	sub	r30, r24
 298:	f9 0b       	sbc	r31, r25
 29a:	e1 31       	cpi	r30, 0x11	; 17
 29c:	f1 05       	cpc	r31, r1
 29e:	30 f1       	brcs	.+76     	; 0x2ec <getLine+0x6a>
      return input;
   
   for (ndx = 0; ndx < LINE_SIZE && ndx < strlen(input); ndx++)
 2a0:	30 97       	sbiw	r30, 0x00	; 0
 2a2:	f9 f0       	breq	.+62     	; 0x2e2 <getLine+0x60>
 2a4:	dc 01       	movw	r26, r24
 2a6:	af 01       	movw	r20, r30
 2a8:	ef ef       	ldi	r30, 0xFF	; 255
 2aa:	ff ef       	ldi	r31, 0xFF	; 255
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
      if(input[ndx] == ' ')
 2b0:	9d 91       	ld	r25, X+
 2b2:	90 32       	cpi	r25, 0x20	; 32
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <getLine+0x36>
 2b6:	f9 01       	movw	r30, r18
   int ndx, lastSpace = -1;
   
   if (!input || strlen(input) < LINE_SIZE)
      return input;
   
   for (ndx = 0; ndx < LINE_SIZE && ndx < strlen(input); ndx++)
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255
 2bc:	21 31       	cpi	r18, 0x11	; 17
 2be:	31 05       	cpc	r19, r1
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <getLine+0x46>
 2c2:	24 17       	cp	r18, r20
 2c4:	35 07       	cpc	r19, r21
 2c6:	a1 f7       	brne	.-24     	; 0x2b0 <getLine+0x2e>
      if(input[ndx] == ' ')
         lastSpace = ndx;
   
   if (lastSpace >=0) {
 2c8:	ff 23       	and	r31, r31
 2ca:	5c f0       	brlt	.+22     	; 0x2e2 <getLine+0x60>
      input[lastSpace] = '\0';
 2cc:	de 01       	movw	r26, r28
 2ce:	ae 0f       	add	r26, r30
 2d0:	bf 1f       	adc	r27, r31
 2d2:	1c 92       	st	X, r1
      line = input;
      *extra = input + lastSpace + 1;
 2d4:	31 96       	adiw	r30, 0x01	; 1
 2d6:	ec 0f       	add	r30, r28
 2d8:	fd 1f       	adc	r31, r29
 2da:	db 01       	movw	r26, r22
 2dc:	ed 93       	st	X+, r30
 2de:	fc 93       	st	X, r31
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <getLine+0x6a>
   }
   else
      *extra = input;
 2e2:	fb 01       	movw	r30, r22
 2e4:	d1 83       	std	Z+1, r29	; 0x01
 2e6:	c0 83       	st	Z, r28
#include <stdlib.h>

#define LINE_SIZE 17

char *getLine(char *input, char **extra) {
   char *line = NULL;
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
   }
   else
      *extra = input;
   
   return line;
}
 2ec:	ce 01       	movw	r24, r28
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
