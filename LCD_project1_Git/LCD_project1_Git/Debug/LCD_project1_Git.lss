
LCD_project1_Git.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000008cc  00000960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800130  00800130  00000990  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a7  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bf  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  000015c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b5  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000463  00000000  00000000  00001cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 13 01 	call	0x226	; 0x226 <main>
  9e:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_write_cmd>:
	return 1;
}

// runs pins and delays to send LCD a command 
void lcd_write_cmd(char command){
	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	98 7f       	andi	r25, 0xF8	; 248
  aa:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	95 e0       	ldi	r25, 0x05	; 5
  ae:	9a 95       	dec	r25
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_write_cmd+0x8>
  b2:	00 00       	nop
	_delay_us(1);			// delay
	PORTD = command;		// set command
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_write_cmd+0x12>
  bc:	00 00       	nop
	_delay_us(1);			// delay
	PORTB |= 0b00000100;	// E, RW, RS = 1,0,0
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	95 e0       	ldi	r25, 0x05	; 5
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_write_cmd+0x1c>
  c6:	00 00       	nop
	_delay_us(1);			// delay 
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	87 ec       	ldi	r24, 0xC7	; 199
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_write_cmd+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_write_cmd+0x32>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <lcd_write_char>:
	_delay_us(50);
}

//  runs pins and delays to have LCD print characters 
void lcd_write_char(char character){
	PORTB &= 0b11111000;    // E, RW, RS = 0,0,0
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	95 b9       	out	0x05, r25	; 5
  e2:	95 e0       	ldi	r25, 0x05	; 5
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_write_char+0x8>
  e8:	00 00       	nop
	_delay_us(1);			// delay
	PORTD = character;		// send character
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_write_char+0x12>
  f2:	00 00       	nop
	_delay_us(1);			// delay
	PORTB |= 0b00000101;	// E, RW, RS = 1,0,1
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_write_char+0x20>
 100:	00 00       	nop
	_delay_us(1);			// delay
	PORTB &= 0b11111000;	// E, RW, RS = 0,0,0
 102:	85 b1       	in	r24, 0x05	; 5
 104:	88 7f       	andi	r24, 0xF8	; 248
 106:	85 b9       	out	0x05, r24	; 5
 108:	87 ec       	ldi	r24, 0xC7	; 199
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_write_char+0x30>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_write_char+0x36>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <lcd_initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <lcd_initialize+0x6>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_initialize+0x10>
 126:	00 00       	nop
// runs LCD initialization code
void lcd_initialize(){
	_delay_ms(50);			// power ON delay > 30ms
	
	// run setup
	lcd_write_cmd(func_set);		// run function set
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_initialize+0x1c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_initialize+0x22>
 138:	00 00       	nop
	_delay_us(80);					// delay > 4.5ms
	lcd_write_cmd(disp_ctrl);		// run display set (off)
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
 140:	8f e3       	ldi	r24, 0x3F	; 63
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_initialize+0x2e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_initialize+0x34>
 14a:	00 00       	nop
	_delay_us(80);					// delay > 50us
	lcd_write_cmd(disp_clear);		// run clear display
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f ed       	ldi	r24, 0xDF	; 223
 154:	9e e2       	ldi	r25, 0x2E	; 46
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_initialize+0x40>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_initialize+0x46>
 15c:	00 00       	nop
	_delay_ms(3);					// delay > 3ms
	lcd_write_cmd(entry_mode);		// set entry mode
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_initialize+0x52>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_initialize+0x58>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <lcd_print_string>:
	_delay_us(80);					// delay > 50us
}

// prints string of characters to LCD
void lcd_print_string(char string[]){
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	00 d0       	rcall	.+0      	; 0x17c <lcd_print_string+0xa>
 17c:	00 d0       	rcall	.+0      	; 0x17e <lcd_print_string+0xc>
 17e:	00 d0       	rcall	.+0      	; 0x180 <lcd_print_string+0xe>
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	char *line1, *line2, *extra;
	
	getLines(string, &line1, &line2, &extra);
 184:	9e 01       	movw	r18, r28
 186:	2b 5f       	subi	r18, 0xFB	; 251
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	ae 01       	movw	r20, r28
 18c:	4d 5f       	subi	r20, 0xFD	; 253
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	0e 94 37 01 	call	0x26e	; 0x26e <getLines>
	
	for(int j=0; j<strlen(line1); j++){
 19a:	00 e0       	ldi	r16, 0x00	; 0
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <lcd_print_string+0x48>
		lcd_write_char(line1[j]);
 1a0:	a0 0f       	add	r26, r16
 1a2:	b1 1f       	adc	r27, r17
 1a4:	8c 91       	ld	r24, X
 1a6:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_write_char>
 1aa:	8f e8       	ldi	r24, 0x8F	; 143
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_print_string+0x3c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_print_string+0x42>
 1b4:	00 00       	nop
void lcd_print_string(char string[]){
	char *line1, *line2, *extra;
	
	getLines(string, &line1, &line2, &extra);
	
	for(int j=0; j<strlen(line1); j++){
 1b6:	0f 5f       	subi	r16, 0xFF	; 255
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	a9 81       	ldd	r26, Y+1	; 0x01
 1bc:	ba 81       	ldd	r27, Y+2	; 0x02
 1be:	fd 01       	movw	r30, r26
 1c0:	01 90       	ld	r0, Z+
 1c2:	00 20       	and	r0, r0
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <lcd_print_string+0x4e>
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	ea 1b       	sub	r30, r26
 1ca:	fb 0b       	sbc	r31, r27
 1cc:	0e 17       	cp	r16, r30
 1ce:	1f 07       	cpc	r17, r31
 1d0:	38 f3       	brcs	.-50     	; 0x1a0 <lcd_print_string+0x2e>
		lcd_write_char(line1[j]);
		_delay_us(100);
	}
	
	lcd_write_cmd(set_line2);
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write_cmd>
	
	for(int i=0; i<strlen(line2); i++){
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <lcd_print_string+0x86>
		
		lcd_write_char(line2[i]);
 1de:	a0 0f       	add	r26, r16
 1e0:	b1 1f       	adc	r27, r17
 1e2:	8c 91       	ld	r24, X
 1e4:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_write_char>
 1e8:	8f e8       	ldi	r24, 0x8F	; 143
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_print_string+0x7a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_print_string+0x80>
 1f2:	00 00       	nop
		_delay_us(100);
	}
	
	lcd_write_cmd(set_line2);
	
	for(int i=0; i<strlen(line2); i++){
 1f4:	0f 5f       	subi	r16, 0xFF	; 255
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	ab 81       	ldd	r26, Y+3	; 0x03
 1fa:	bc 81       	ldd	r27, Y+4	; 0x04
 1fc:	fd 01       	movw	r30, r26
 1fe:	01 90       	ld	r0, Z+
 200:	00 20       	and	r0, r0
 202:	e9 f7       	brne	.-6      	; 0x1fe <lcd_print_string+0x8c>
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	ea 1b       	sub	r30, r26
 208:	fb 0b       	sbc	r31, r27
 20a:	0e 17       	cp	r16, r30
 20c:	1f 07       	cpc	r17, r31
 20e:	38 f3       	brcs	.-50     	; 0x1de <lcd_print_string+0x6c>
		
		lcd_write_char(line2[i]);
		_delay_us(100);
	}
}
 210:	26 96       	adiw	r28, 0x06	; 6
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <main>:
void lcd_initialize();
void lcd_print_string(char string[]);

int main(void)
{
	UCSR0B = 0;				// allows atmel to R/W to pins 0 and 1
 226:	10 92 c1 00 	sts	0x00C1, r1
	DDRB = 0b00100111;		// Pin11-12 = Input; E, RW, RS, PIN13 = output
 22a:	87 e2       	ldi	r24, 0x27	; 39
 22c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;		// DB(7-0) = output	
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= 0b00011000;	// set internal pull-ups @ pin11/12
 232:	85 b1       	in	r24, 0x05	; 5
 234:	88 61       	ori	r24, 0x18	; 24
 236:	85 b9       	out	0x05, r24	; 5
	
	//initialize LCD
	lcd_initialize();
 238:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_initialize>
	
	// print to the LCD
	lcd_print_string("Hello World! Iamveryhappytotrythisout!");
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_print_string>
	
	while(1){
		//if button is pressed
		if((~PINB & 0b00010000) | (~PINB & 0b00001000))
 244:	93 b1       	in	r25, 0x03	; 3
 246:	23 b1       	in	r18, 0x03	; 3
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	20 95       	com	r18
 24c:	30 95       	com	r19
 24e:	28 70       	andi	r18, 0x08	; 8
 250:	33 27       	eor	r19, r19
 252:	89 2f       	mov	r24, r25
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	80 95       	com	r24
 258:	90 95       	com	r25
 25a:	80 71       	andi	r24, 0x10	; 16
 25c:	99 27       	eor	r25, r25
 25e:	82 2b       	or	r24, r18
 260:	93 2b       	or	r25, r19
 262:	89 2b       	or	r24, r25
 264:	11 f0       	breq	.+4      	; 0x26a <main+0x44>
			PORTB |= 0b00100000;	// turn on led
 266:	2d 9a       	sbi	0x05, 5	; 5
 268:	ed cf       	rjmp	.-38     	; 0x244 <main+0x1e>
		else
			PORTB &= 0b11011111;	// turn off led
 26a:	2d 98       	cbi	0x05, 5	; 5
 26c:	eb cf       	rjmp	.-42     	; 0x244 <main+0x1e>

0000026e <getLines>:
 26e:	4f 92       	push	r4
 270:	5f 92       	push	r5
 272:	6f 92       	push	r6
 274:	7f 92       	push	r7
 276:	8f 92       	push	r8
 278:	9f 92       	push	r9
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
 290:	4b 01       	movw	r8, r22
 292:	2a 01       	movw	r4, r20
 294:	59 01       	movw	r10, r18
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	81 e1       	ldi	r24, 0x11	; 17
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <calloc>
 2a2:	d4 01       	movw	r26, r8
 2a4:	8d 93       	st	X+, r24
 2a6:	9c 93       	st	X, r25
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	81 e1       	ldi	r24, 0x11	; 17
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <calloc>
 2b4:	f2 01       	movw	r30, r4
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	80 83       	st	Z, r24
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <calloc>
 2c6:	d5 01       	movw	r26, r10
 2c8:	8d 93       	st	X+, r24
 2ca:	9c 93       	st	X, r25
 2cc:	f4 01       	movw	r30, r8
 2ce:	e0 80       	ld	r14, Z
 2d0:	f1 80       	ldd	r15, Z+1	; 0x01
 2d2:	6d e2       	ldi	r22, 0x2D	; 45
 2d4:	71 e0       	ldi	r23, 0x01	; 1
 2d6:	ce 01       	movw	r24, r28
 2d8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <strtok>
 2dc:	ec 01       	movw	r28, r24
 2de:	89 2b       	or	r24, r25
 2e0:	71 f4       	brne	.+28     	; 0x2fe <getLines+0x90>
 2e2:	50 c0       	rjmp	.+160    	; 0x384 <getLines+0x116>
 2e4:	01 15       	cp	r16, r1
 2e6:	11 05       	cpc	r17, r1
 2e8:	81 f0       	breq	.+32     	; 0x30a <getLines+0x9c>
 2ea:	f7 01       	movw	r30, r14
 2ec:	01 90       	ld	r0, Z+
 2ee:	00 20       	and	r0, r0
 2f0:	e9 f7       	brne	.-6      	; 0x2ec <getLines+0x7e>
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	71 82       	std	Z+1, r7	; 0x01
 2f6:	60 82       	st	Z, r6
 2f8:	0f 5f       	subi	r16, 0xFF	; 255
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <getLines+0x9c>
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	68 94       	set
 304:	66 24       	eor	r6, r6
 306:	65 f8       	bld	r6, 5
 308:	71 2c       	mov	r7, r1
 30a:	fe 01       	movw	r30, r28
 30c:	01 90       	ld	r0, Z+
 30e:	00 20       	and	r0, r0
 310:	e9 f7       	brne	.-6      	; 0x30c <getLines+0x9e>
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	ec 1b       	sub	r30, r28
 316:	fd 0b       	sbc	r31, r29
 318:	0e 0f       	add	r16, r30
 31a:	1f 1f       	adc	r17, r31
 31c:	01 31       	cpi	r16, 0x11	; 17
 31e:	11 05       	cpc	r17, r1
 320:	94 f0       	brlt	.+36     	; 0x346 <getLines+0xd8>
 322:	d5 01       	movw	r26, r10
 324:	cd 90       	ld	r12, X+
 326:	dc 90       	ld	r13, X
 328:	ce 14       	cp	r12, r14
 32a:	df 04       	cpc	r13, r15
 32c:	99 f0       	breq	.+38     	; 0x354 <getLines+0xe6>
 32e:	d4 01       	movw	r26, r8
 330:	8d 91       	ld	r24, X+
 332:	9c 91       	ld	r25, X
 334:	8e 15       	cp	r24, r14
 336:	9f 05       	cpc	r25, r15
 338:	19 f4       	brne	.+6      	; 0x340 <getLines+0xd2>
 33a:	d2 01       	movw	r26, r4
 33c:	cd 90       	ld	r12, X+
 33e:	dc 90       	ld	r13, X
 340:	8f 01       	movw	r16, r30
 342:	76 01       	movw	r14, r12
 344:	11 c0       	rjmp	.+34     	; 0x368 <getLines+0xfa>
 346:	f5 01       	movw	r30, r10
 348:	80 81       	ld	r24, Z
 34a:	91 81       	ldd	r25, Z+1	; 0x01
 34c:	8e 15       	cp	r24, r14
 34e:	9f 05       	cpc	r25, r15
 350:	59 f4       	brne	.+22     	; 0x368 <getLines+0xfa>
 352:	67 01       	movw	r12, r14
 354:	b8 01       	movw	r22, r16
 356:	6f 5f       	subi	r22, 0xFF	; 255
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	c6 01       	movw	r24, r12
 35c:	0e 94 1c 03 	call	0x638	; 0x638 <realloc>
 360:	d5 01       	movw	r26, r10
 362:	8d 93       	st	X+, r24
 364:	9c 93       	st	X, r25
 366:	76 01       	movw	r14, r12
 368:	be 01       	movw	r22, r28
 36a:	c7 01       	movw	r24, r14
 36c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <strcat>
 370:	6d e2       	ldi	r22, 0x2D	; 45
 372:	71 e0       	ldi	r23, 0x01	; 1
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 e6 03 	call	0x7cc	; 0x7cc <strtok>
 37c:	ec 01       	movw	r28, r24
 37e:	89 2b       	or	r24, r25
 380:	09 f0       	breq	.+2      	; 0x384 <getLines+0x116>
 382:	b0 cf       	rjmp	.-160    	; 0x2e4 <getLines+0x76>
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	cf 90       	pop	r12
 394:	bf 90       	pop	r11
 396:	af 90       	pop	r10
 398:	9f 90       	pop	r9
 39a:	8f 90       	pop	r8
 39c:	7f 90       	pop	r7
 39e:	6f 90       	pop	r6
 3a0:	5f 90       	pop	r5
 3a2:	4f 90       	pop	r4
 3a4:	08 95       	ret

000003a6 <calloc>:
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	86 9f       	mul	r24, r22
 3b0:	80 01       	movw	r16, r0
 3b2:	87 9f       	mul	r24, r23
 3b4:	10 0d       	add	r17, r0
 3b6:	96 9f       	mul	r25, r22
 3b8:	10 0d       	add	r17, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	c8 01       	movw	r24, r16
 3be:	0e 94 ef 01 	call	0x3de	; 0x3de <malloc>
 3c2:	ec 01       	movw	r28, r24
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	29 f0       	breq	.+10     	; 0x3d2 <calloc+0x2c>
 3c8:	a8 01       	movw	r20, r16
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <memset>
 3d2:	ce 01       	movw	r24, r28
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <malloc>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	91 05       	cpc	r25, r1
 3e6:	10 f4       	brcc	.+4      	; 0x3ec <malloc+0xe>
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	e0 91 34 01 	lds	r30, 0x0134
 3f0:	f0 91 35 01 	lds	r31, 0x0135
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
 3fc:	30 97       	sbiw	r30, 0x00	; 0
 3fe:	11 f1       	breq	.+68     	; 0x444 <malloc+0x66>
 400:	40 81       	ld	r20, Z
 402:	51 81       	ldd	r21, Z+1	; 0x01
 404:	48 17       	cp	r20, r24
 406:	59 07       	cpc	r21, r25
 408:	c0 f0       	brcs	.+48     	; 0x43a <malloc+0x5c>
 40a:	48 17       	cp	r20, r24
 40c:	59 07       	cpc	r21, r25
 40e:	61 f4       	brne	.+24     	; 0x428 <malloc+0x4a>
 410:	82 81       	ldd	r24, Z+2	; 0x02
 412:	93 81       	ldd	r25, Z+3	; 0x03
 414:	20 97       	sbiw	r28, 0x00	; 0
 416:	19 f0       	breq	.+6      	; 0x41e <malloc+0x40>
 418:	9b 83       	std	Y+3, r25	; 0x03
 41a:	8a 83       	std	Y+2, r24	; 0x02
 41c:	2b c0       	rjmp	.+86     	; 0x474 <malloc+0x96>
 41e:	90 93 35 01 	sts	0x0135, r25
 422:	80 93 34 01 	sts	0x0134, r24
 426:	26 c0       	rjmp	.+76     	; 0x474 <malloc+0x96>
 428:	21 15       	cp	r18, r1
 42a:	31 05       	cpc	r19, r1
 42c:	19 f0       	breq	.+6      	; 0x434 <malloc+0x56>
 42e:	42 17       	cp	r20, r18
 430:	53 07       	cpc	r21, r19
 432:	18 f4       	brcc	.+6      	; 0x43a <malloc+0x5c>
 434:	9a 01       	movw	r18, r20
 436:	be 01       	movw	r22, r28
 438:	df 01       	movw	r26, r30
 43a:	ef 01       	movw	r28, r30
 43c:	02 80       	ldd	r0, Z+2	; 0x02
 43e:	f3 81       	ldd	r31, Z+3	; 0x03
 440:	e0 2d       	mov	r30, r0
 442:	dc cf       	rjmp	.-72     	; 0x3fc <malloc+0x1e>
 444:	21 15       	cp	r18, r1
 446:	31 05       	cpc	r19, r1
 448:	09 f1       	breq	.+66     	; 0x48c <malloc+0xae>
 44a:	28 1b       	sub	r18, r24
 44c:	39 0b       	sbc	r19, r25
 44e:	24 30       	cpi	r18, 0x04	; 4
 450:	31 05       	cpc	r19, r1
 452:	90 f4       	brcc	.+36     	; 0x478 <malloc+0x9a>
 454:	12 96       	adiw	r26, 0x02	; 2
 456:	8d 91       	ld	r24, X+
 458:	9c 91       	ld	r25, X
 45a:	13 97       	sbiw	r26, 0x03	; 3
 45c:	61 15       	cp	r22, r1
 45e:	71 05       	cpc	r23, r1
 460:	21 f0       	breq	.+8      	; 0x46a <malloc+0x8c>
 462:	fb 01       	movw	r30, r22
 464:	93 83       	std	Z+3, r25	; 0x03
 466:	82 83       	std	Z+2, r24	; 0x02
 468:	04 c0       	rjmp	.+8      	; 0x472 <malloc+0x94>
 46a:	90 93 35 01 	sts	0x0135, r25
 46e:	80 93 34 01 	sts	0x0134, r24
 472:	fd 01       	movw	r30, r26
 474:	32 96       	adiw	r30, 0x02	; 2
 476:	44 c0       	rjmp	.+136    	; 0x500 <malloc+0x122>
 478:	fd 01       	movw	r30, r26
 47a:	e2 0f       	add	r30, r18
 47c:	f3 1f       	adc	r31, r19
 47e:	81 93       	st	Z+, r24
 480:	91 93       	st	Z+, r25
 482:	22 50       	subi	r18, 0x02	; 2
 484:	31 09       	sbc	r19, r1
 486:	2d 93       	st	X+, r18
 488:	3c 93       	st	X, r19
 48a:	3a c0       	rjmp	.+116    	; 0x500 <malloc+0x122>
 48c:	20 91 32 01 	lds	r18, 0x0132
 490:	30 91 33 01 	lds	r19, 0x0133
 494:	23 2b       	or	r18, r19
 496:	41 f4       	brne	.+16     	; 0x4a8 <malloc+0xca>
 498:	20 91 02 01 	lds	r18, 0x0102
 49c:	30 91 03 01 	lds	r19, 0x0103
 4a0:	30 93 33 01 	sts	0x0133, r19
 4a4:	20 93 32 01 	sts	0x0132, r18
 4a8:	20 91 00 01 	lds	r18, 0x0100
 4ac:	30 91 01 01 	lds	r19, 0x0101
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <malloc+0xe8>
 4b6:	2d b7       	in	r18, 0x3d	; 61
 4b8:	3e b7       	in	r19, 0x3e	; 62
 4ba:	40 91 04 01 	lds	r20, 0x0104
 4be:	50 91 05 01 	lds	r21, 0x0105
 4c2:	24 1b       	sub	r18, r20
 4c4:	35 0b       	sbc	r19, r21
 4c6:	e0 91 32 01 	lds	r30, 0x0132
 4ca:	f0 91 33 01 	lds	r31, 0x0133
 4ce:	e2 17       	cp	r30, r18
 4d0:	f3 07       	cpc	r31, r19
 4d2:	a0 f4       	brcc	.+40     	; 0x4fc <malloc+0x11e>
 4d4:	2e 1b       	sub	r18, r30
 4d6:	3f 0b       	sbc	r19, r31
 4d8:	28 17       	cp	r18, r24
 4da:	39 07       	cpc	r19, r25
 4dc:	78 f0       	brcs	.+30     	; 0x4fc <malloc+0x11e>
 4de:	ac 01       	movw	r20, r24
 4e0:	4e 5f       	subi	r20, 0xFE	; 254
 4e2:	5f 4f       	sbci	r21, 0xFF	; 255
 4e4:	24 17       	cp	r18, r20
 4e6:	35 07       	cpc	r19, r21
 4e8:	48 f0       	brcs	.+18     	; 0x4fc <malloc+0x11e>
 4ea:	4e 0f       	add	r20, r30
 4ec:	5f 1f       	adc	r21, r31
 4ee:	50 93 33 01 	sts	0x0133, r21
 4f2:	40 93 32 01 	sts	0x0132, r20
 4f6:	81 93       	st	Z+, r24
 4f8:	91 93       	st	Z+, r25
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <malloc+0x122>
 4fc:	e0 e0       	ldi	r30, 0x00	; 0
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	cf 01       	movw	r24, r30
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <free>:
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	00 97       	sbiw	r24, 0x00	; 0
 512:	09 f4       	brne	.+2      	; 0x516 <free+0xe>
 514:	8c c0       	rjmp	.+280    	; 0x62e <free+0x126>
 516:	fc 01       	movw	r30, r24
 518:	32 97       	sbiw	r30, 0x02	; 2
 51a:	13 82       	std	Z+3, r1	; 0x03
 51c:	12 82       	std	Z+2, r1	; 0x02
 51e:	00 91 34 01 	lds	r16, 0x0134
 522:	10 91 35 01 	lds	r17, 0x0135
 526:	01 15       	cp	r16, r1
 528:	11 05       	cpc	r17, r1
 52a:	81 f4       	brne	.+32     	; 0x54c <free+0x44>
 52c:	20 81       	ld	r18, Z
 52e:	31 81       	ldd	r19, Z+1	; 0x01
 530:	82 0f       	add	r24, r18
 532:	93 1f       	adc	r25, r19
 534:	20 91 32 01 	lds	r18, 0x0132
 538:	30 91 33 01 	lds	r19, 0x0133
 53c:	28 17       	cp	r18, r24
 53e:	39 07       	cpc	r19, r25
 540:	79 f5       	brne	.+94     	; 0x5a0 <free+0x98>
 542:	f0 93 33 01 	sts	0x0133, r31
 546:	e0 93 32 01 	sts	0x0132, r30
 54a:	71 c0       	rjmp	.+226    	; 0x62e <free+0x126>
 54c:	d8 01       	movw	r26, r16
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	ae 17       	cp	r26, r30
 554:	bf 07       	cpc	r27, r31
 556:	50 f4       	brcc	.+20     	; 0x56c <free+0x64>
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	2d 91       	ld	r18, X+
 55c:	3c 91       	ld	r19, X
 55e:	13 97       	sbiw	r26, 0x03	; 3
 560:	ad 01       	movw	r20, r26
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	09 f1       	breq	.+66     	; 0x5aa <free+0xa2>
 568:	d9 01       	movw	r26, r18
 56a:	f3 cf       	rjmp	.-26     	; 0x552 <free+0x4a>
 56c:	9d 01       	movw	r18, r26
 56e:	da 01       	movw	r26, r20
 570:	33 83       	std	Z+3, r19	; 0x03
 572:	22 83       	std	Z+2, r18	; 0x02
 574:	60 81       	ld	r22, Z
 576:	71 81       	ldd	r23, Z+1	; 0x01
 578:	86 0f       	add	r24, r22
 57a:	97 1f       	adc	r25, r23
 57c:	82 17       	cp	r24, r18
 57e:	93 07       	cpc	r25, r19
 580:	69 f4       	brne	.+26     	; 0x59c <free+0x94>
 582:	ec 01       	movw	r28, r24
 584:	28 81       	ld	r18, Y
 586:	39 81       	ldd	r19, Y+1	; 0x01
 588:	26 0f       	add	r18, r22
 58a:	37 1f       	adc	r19, r23
 58c:	2e 5f       	subi	r18, 0xFE	; 254
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	31 83       	std	Z+1, r19	; 0x01
 592:	20 83       	st	Z, r18
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	9b 81       	ldd	r25, Y+3	; 0x03
 598:	93 83       	std	Z+3, r25	; 0x03
 59a:	82 83       	std	Z+2, r24	; 0x02
 59c:	45 2b       	or	r20, r21
 59e:	29 f4       	brne	.+10     	; 0x5aa <free+0xa2>
 5a0:	f0 93 35 01 	sts	0x0135, r31
 5a4:	e0 93 34 01 	sts	0x0134, r30
 5a8:	42 c0       	rjmp	.+132    	; 0x62e <free+0x126>
 5aa:	13 96       	adiw	r26, 0x03	; 3
 5ac:	fc 93       	st	X, r31
 5ae:	ee 93       	st	-X, r30
 5b0:	12 97       	sbiw	r26, 0x02	; 2
 5b2:	ed 01       	movw	r28, r26
 5b4:	49 91       	ld	r20, Y+
 5b6:	59 91       	ld	r21, Y+
 5b8:	9e 01       	movw	r18, r28
 5ba:	24 0f       	add	r18, r20
 5bc:	35 1f       	adc	r19, r21
 5be:	e2 17       	cp	r30, r18
 5c0:	f3 07       	cpc	r31, r19
 5c2:	71 f4       	brne	.+28     	; 0x5e0 <free+0xd8>
 5c4:	80 81       	ld	r24, Z
 5c6:	91 81       	ldd	r25, Z+1	; 0x01
 5c8:	84 0f       	add	r24, r20
 5ca:	95 1f       	adc	r25, r21
 5cc:	02 96       	adiw	r24, 0x02	; 2
 5ce:	11 96       	adiw	r26, 0x01	; 1
 5d0:	9c 93       	st	X, r25
 5d2:	8e 93       	st	-X, r24
 5d4:	82 81       	ldd	r24, Z+2	; 0x02
 5d6:	93 81       	ldd	r25, Z+3	; 0x03
 5d8:	13 96       	adiw	r26, 0x03	; 3
 5da:	9c 93       	st	X, r25
 5dc:	8e 93       	st	-X, r24
 5de:	12 97       	sbiw	r26, 0x02	; 2
 5e0:	e0 e0       	ldi	r30, 0x00	; 0
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	d8 01       	movw	r26, r16
 5e6:	12 96       	adiw	r26, 0x02	; 2
 5e8:	8d 91       	ld	r24, X+
 5ea:	9c 91       	ld	r25, X
 5ec:	13 97       	sbiw	r26, 0x03	; 3
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <free+0xf0>
 5f2:	f8 01       	movw	r30, r16
 5f4:	8c 01       	movw	r16, r24
 5f6:	f6 cf       	rjmp	.-20     	; 0x5e4 <free+0xdc>
 5f8:	8d 91       	ld	r24, X+
 5fa:	9c 91       	ld	r25, X
 5fc:	98 01       	movw	r18, r16
 5fe:	2e 5f       	subi	r18, 0xFE	; 254
 600:	3f 4f       	sbci	r19, 0xFF	; 255
 602:	82 0f       	add	r24, r18
 604:	93 1f       	adc	r25, r19
 606:	20 91 32 01 	lds	r18, 0x0132
 60a:	30 91 33 01 	lds	r19, 0x0133
 60e:	28 17       	cp	r18, r24
 610:	39 07       	cpc	r19, r25
 612:	69 f4       	brne	.+26     	; 0x62e <free+0x126>
 614:	30 97       	sbiw	r30, 0x00	; 0
 616:	29 f4       	brne	.+10     	; 0x622 <free+0x11a>
 618:	10 92 35 01 	sts	0x0135, r1
 61c:	10 92 34 01 	sts	0x0134, r1
 620:	02 c0       	rjmp	.+4      	; 0x626 <free+0x11e>
 622:	13 82       	std	Z+3, r1	; 0x03
 624:	12 82       	std	Z+2, r1	; 0x02
 626:	10 93 33 01 	sts	0x0133, r17
 62a:	00 93 32 01 	sts	0x0132, r16
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <realloc>:
 638:	a0 e0       	ldi	r26, 0x00	; 0
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e2 e2       	ldi	r30, 0x22	; 34
 63e:	f3 e0       	ldi	r31, 0x03	; 3
 640:	0c 94 31 04 	jmp	0x862	; 0x862 <__prologue_saves__+0x8>
 644:	ec 01       	movw	r28, r24
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	21 f4       	brne	.+8      	; 0x652 <realloc+0x1a>
 64a:	cb 01       	movw	r24, r22
 64c:	0e 94 ef 01 	call	0x3de	; 0x3de <malloc>
 650:	b8 c0       	rjmp	.+368    	; 0x7c2 <realloc+0x18a>
 652:	fc 01       	movw	r30, r24
 654:	e6 0f       	add	r30, r22
 656:	f7 1f       	adc	r31, r23
 658:	9c 01       	movw	r18, r24
 65a:	22 50       	subi	r18, 0x02	; 2
 65c:	31 09       	sbc	r19, r1
 65e:	e2 17       	cp	r30, r18
 660:	f3 07       	cpc	r31, r19
 662:	08 f4       	brcc	.+2      	; 0x666 <realloc+0x2e>
 664:	ac c0       	rjmp	.+344    	; 0x7be <realloc+0x186>
 666:	d9 01       	movw	r26, r18
 668:	0d 91       	ld	r16, X+
 66a:	1c 91       	ld	r17, X
 66c:	11 97       	sbiw	r26, 0x01	; 1
 66e:	06 17       	cp	r16, r22
 670:	17 07       	cpc	r17, r23
 672:	b0 f0       	brcs	.+44     	; 0x6a0 <realloc+0x68>
 674:	05 30       	cpi	r16, 0x05	; 5
 676:	11 05       	cpc	r17, r1
 678:	08 f4       	brcc	.+2      	; 0x67c <realloc+0x44>
 67a:	9f c0       	rjmp	.+318    	; 0x7ba <realloc+0x182>
 67c:	c8 01       	movw	r24, r16
 67e:	04 97       	sbiw	r24, 0x04	; 4
 680:	86 17       	cp	r24, r22
 682:	97 07       	cpc	r25, r23
 684:	08 f4       	brcc	.+2      	; 0x688 <realloc+0x50>
 686:	99 c0       	rjmp	.+306    	; 0x7ba <realloc+0x182>
 688:	02 50       	subi	r16, 0x02	; 2
 68a:	11 09       	sbc	r17, r1
 68c:	06 1b       	sub	r16, r22
 68e:	17 0b       	sbc	r17, r23
 690:	01 93       	st	Z+, r16
 692:	11 93       	st	Z+, r17
 694:	6d 93       	st	X+, r22
 696:	7c 93       	st	X, r23
 698:	cf 01       	movw	r24, r30
 69a:	0e 94 84 02 	call	0x508	; 0x508 <free>
 69e:	8d c0       	rjmp	.+282    	; 0x7ba <realloc+0x182>
 6a0:	5b 01       	movw	r10, r22
 6a2:	a0 1a       	sub	r10, r16
 6a4:	b1 0a       	sbc	r11, r17
 6a6:	4c 01       	movw	r8, r24
 6a8:	80 0e       	add	r8, r16
 6aa:	91 1e       	adc	r9, r17
 6ac:	a0 91 34 01 	lds	r26, 0x0134
 6b0:	b0 91 35 01 	lds	r27, 0x0135
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	e1 2c       	mov	r14, r1
 6ba:	f1 2c       	mov	r15, r1
 6bc:	10 97       	sbiw	r26, 0x00	; 0
 6be:	09 f4       	brne	.+2      	; 0x6c2 <realloc+0x8a>
 6c0:	4a c0       	rjmp	.+148    	; 0x756 <realloc+0x11e>
 6c2:	a8 15       	cp	r26, r8
 6c4:	b9 05       	cpc	r27, r9
 6c6:	d1 f5       	brne	.+116    	; 0x73c <realloc+0x104>
 6c8:	6d 90       	ld	r6, X+
 6ca:	7c 90       	ld	r7, X
 6cc:	11 97       	sbiw	r26, 0x01	; 1
 6ce:	63 01       	movw	r12, r6
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	c8 0e       	add	r12, r24
 6d4:	d1 1c       	adc	r13, r1
 6d6:	ca 14       	cp	r12, r10
 6d8:	db 04       	cpc	r13, r11
 6da:	80 f1       	brcs	.+96     	; 0x73c <realloc+0x104>
 6dc:	a3 01       	movw	r20, r6
 6de:	4a 19       	sub	r20, r10
 6e0:	5b 09       	sbc	r21, r11
 6e2:	6a 01       	movw	r12, r20
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	c8 0e       	add	r12, r24
 6e8:	d1 1c       	adc	r13, r1
 6ea:	12 96       	adiw	r26, 0x02	; 2
 6ec:	bc 90       	ld	r11, X
 6ee:	12 97       	sbiw	r26, 0x02	; 2
 6f0:	13 96       	adiw	r26, 0x03	; 3
 6f2:	ac 91       	ld	r26, X
 6f4:	b5 e0       	ldi	r27, 0x05	; 5
 6f6:	cb 16       	cp	r12, r27
 6f8:	d1 04       	cpc	r13, r1
 6fa:	40 f0       	brcs	.+16     	; 0x70c <realloc+0xd4>
 6fc:	b2 82       	std	Z+2, r11	; 0x02
 6fe:	a3 83       	std	Z+3, r26	; 0x03
 700:	51 83       	std	Z+1, r21	; 0x01
 702:	40 83       	st	Z, r20
 704:	d9 01       	movw	r26, r18
 706:	6d 93       	st	X+, r22
 708:	7c 93       	st	X, r23
 70a:	0a c0       	rjmp	.+20     	; 0x720 <realloc+0xe8>
 70c:	0e 5f       	subi	r16, 0xFE	; 254
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	c3 01       	movw	r24, r6
 712:	80 0f       	add	r24, r16
 714:	91 1f       	adc	r25, r17
 716:	f9 01       	movw	r30, r18
 718:	91 83       	std	Z+1, r25	; 0x01
 71a:	80 83       	st	Z, r24
 71c:	eb 2d       	mov	r30, r11
 71e:	fa 2f       	mov	r31, r26
 720:	e1 14       	cp	r14, r1
 722:	f1 04       	cpc	r15, r1
 724:	31 f0       	breq	.+12     	; 0x732 <realloc+0xfa>
 726:	d7 01       	movw	r26, r14
 728:	13 96       	adiw	r26, 0x03	; 3
 72a:	fc 93       	st	X, r31
 72c:	ee 93       	st	-X, r30
 72e:	12 97       	sbiw	r26, 0x02	; 2
 730:	44 c0       	rjmp	.+136    	; 0x7ba <realloc+0x182>
 732:	f0 93 35 01 	sts	0x0135, r31
 736:	e0 93 34 01 	sts	0x0134, r30
 73a:	3f c0       	rjmp	.+126    	; 0x7ba <realloc+0x182>
 73c:	8d 91       	ld	r24, X+
 73e:	9c 91       	ld	r25, X
 740:	11 97       	sbiw	r26, 0x01	; 1
 742:	48 17       	cp	r20, r24
 744:	59 07       	cpc	r21, r25
 746:	08 f4       	brcc	.+2      	; 0x74a <realloc+0x112>
 748:	ac 01       	movw	r20, r24
 74a:	7d 01       	movw	r14, r26
 74c:	12 96       	adiw	r26, 0x02	; 2
 74e:	0d 90       	ld	r0, X+
 750:	bc 91       	ld	r27, X
 752:	a0 2d       	mov	r26, r0
 754:	b3 cf       	rjmp	.-154    	; 0x6bc <realloc+0x84>
 756:	80 91 32 01 	lds	r24, 0x0132
 75a:	90 91 33 01 	lds	r25, 0x0133
 75e:	88 15       	cp	r24, r8
 760:	99 05       	cpc	r25, r9
 762:	e1 f4       	brne	.+56     	; 0x79c <realloc+0x164>
 764:	46 17       	cp	r20, r22
 766:	57 07       	cpc	r21, r23
 768:	c8 f4       	brcc	.+50     	; 0x79c <realloc+0x164>
 76a:	80 91 00 01 	lds	r24, 0x0100
 76e:	90 91 01 01 	lds	r25, 0x0101
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	41 f4       	brne	.+16     	; 0x786 <realloc+0x14e>
 776:	8d b7       	in	r24, 0x3d	; 61
 778:	9e b7       	in	r25, 0x3e	; 62
 77a:	40 91 04 01 	lds	r20, 0x0104
 77e:	50 91 05 01 	lds	r21, 0x0105
 782:	84 1b       	sub	r24, r20
 784:	95 0b       	sbc	r25, r21
 786:	e8 17       	cp	r30, r24
 788:	f9 07       	cpc	r31, r25
 78a:	c8 f4       	brcc	.+50     	; 0x7be <realloc+0x186>
 78c:	f0 93 33 01 	sts	0x0133, r31
 790:	e0 93 32 01 	sts	0x0132, r30
 794:	f9 01       	movw	r30, r18
 796:	71 83       	std	Z+1, r23	; 0x01
 798:	60 83       	st	Z, r22
 79a:	0f c0       	rjmp	.+30     	; 0x7ba <realloc+0x182>
 79c:	cb 01       	movw	r24, r22
 79e:	0e 94 ef 01 	call	0x3de	; 0x3de <malloc>
 7a2:	7c 01       	movw	r14, r24
 7a4:	00 97       	sbiw	r24, 0x00	; 0
 7a6:	59 f0       	breq	.+22     	; 0x7be <realloc+0x186>
 7a8:	a8 01       	movw	r20, r16
 7aa:	be 01       	movw	r22, r28
 7ac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <memcpy>
 7b0:	ce 01       	movw	r24, r28
 7b2:	0e 94 84 02 	call	0x508	; 0x508 <free>
 7b6:	c7 01       	movw	r24, r14
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <realloc+0x18a>
 7ba:	ce 01       	movw	r24, r28
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <realloc+0x18a>
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
 7c6:	ee e0       	ldi	r30, 0x0E	; 14
 7c8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__epilogue_restores__+0x8>

000007cc <strtok>:
 7cc:	40 e3       	ldi	r20, 0x30	; 48
 7ce:	51 e0       	ldi	r21, 0x01	; 1
 7d0:	0e 94 06 04 	call	0x80c	; 0x80c <strtok_r>
 7d4:	08 95       	ret

000007d6 <memcpy>:
 7d6:	fb 01       	movw	r30, r22
 7d8:	dc 01       	movw	r26, r24
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <memcpy+0xa>
 7dc:	01 90       	ld	r0, Z+
 7de:	0d 92       	st	X+, r0
 7e0:	41 50       	subi	r20, 0x01	; 1
 7e2:	50 40       	sbci	r21, 0x00	; 0
 7e4:	d8 f7       	brcc	.-10     	; 0x7dc <memcpy+0x6>
 7e6:	08 95       	ret

000007e8 <memset>:
 7e8:	dc 01       	movw	r26, r24
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <memset+0x6>
 7ec:	6d 93       	st	X+, r22
 7ee:	41 50       	subi	r20, 0x01	; 1
 7f0:	50 40       	sbci	r21, 0x00	; 0
 7f2:	e0 f7       	brcc	.-8      	; 0x7ec <memset+0x4>
 7f4:	08 95       	ret

000007f6 <strcat>:
 7f6:	fb 01       	movw	r30, r22
 7f8:	dc 01       	movw	r26, r24
 7fa:	0d 90       	ld	r0, X+
 7fc:	00 20       	and	r0, r0
 7fe:	e9 f7       	brne	.-6      	; 0x7fa <strcat+0x4>
 800:	11 97       	sbiw	r26, 0x01	; 1
 802:	01 90       	ld	r0, Z+
 804:	0d 92       	st	X+, r0
 806:	00 20       	and	r0, r0
 808:	e1 f7       	brne	.-8      	; 0x802 <strcat+0xc>
 80a:	08 95       	ret

0000080c <strtok_r>:
 80c:	fa 01       	movw	r30, r20
 80e:	a1 91       	ld	r26, Z+
 810:	b0 81       	ld	r27, Z
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	19 f4       	brne	.+6      	; 0x81c <strtok_r+0x10>
 816:	10 97       	sbiw	r26, 0x00	; 0
 818:	e1 f0       	breq	.+56     	; 0x852 <strtok_r+0x46>
 81a:	cd 01       	movw	r24, r26
 81c:	dc 01       	movw	r26, r24
 81e:	cd 01       	movw	r24, r26
 820:	0d 90       	ld	r0, X+
 822:	00 20       	and	r0, r0
 824:	11 f4       	brne	.+4      	; 0x82a <strtok_r+0x1e>
 826:	c0 01       	movw	r24, r0
 828:	13 c0       	rjmp	.+38     	; 0x850 <strtok_r+0x44>
 82a:	fb 01       	movw	r30, r22
 82c:	21 91       	ld	r18, Z+
 82e:	22 23       	and	r18, r18
 830:	19 f0       	breq	.+6      	; 0x838 <strtok_r+0x2c>
 832:	20 15       	cp	r18, r0
 834:	d9 f7       	brne	.-10     	; 0x82c <strtok_r+0x20>
 836:	f3 cf       	rjmp	.-26     	; 0x81e <strtok_r+0x12>
 838:	fb 01       	movw	r30, r22
 83a:	21 91       	ld	r18, Z+
 83c:	20 15       	cp	r18, r0
 83e:	19 f4       	brne	.+6      	; 0x846 <strtok_r+0x3a>
 840:	1e 92       	st	-X, r1
 842:	11 96       	adiw	r26, 0x01	; 1
 844:	06 c0       	rjmp	.+12     	; 0x852 <strtok_r+0x46>
 846:	22 23       	and	r18, r18
 848:	c1 f7       	brne	.-16     	; 0x83a <strtok_r+0x2e>
 84a:	0d 90       	ld	r0, X+
 84c:	00 20       	and	r0, r0
 84e:	a1 f7       	brne	.-24     	; 0x838 <strtok_r+0x2c>
 850:	d0 01       	movw	r26, r0
 852:	fa 01       	movw	r30, r20
 854:	a1 93       	st	Z+, r26
 856:	b0 83       	st	Z, r27
 858:	08 95       	ret

0000085a <__prologue_saves__>:
 85a:	2f 92       	push	r2
 85c:	3f 92       	push	r3
 85e:	4f 92       	push	r4
 860:	5f 92       	push	r5
 862:	6f 92       	push	r6
 864:	7f 92       	push	r7
 866:	8f 92       	push	r8
 868:	9f 92       	push	r9
 86a:	af 92       	push	r10
 86c:	bf 92       	push	r11
 86e:	cf 92       	push	r12
 870:	df 92       	push	r13
 872:	ef 92       	push	r14
 874:	ff 92       	push	r15
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	ca 1b       	sub	r28, r26
 884:	db 0b       	sbc	r29, r27
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	f8 94       	cli
 88a:	de bf       	out	0x3e, r29	; 62
 88c:	0f be       	out	0x3f, r0	; 63
 88e:	cd bf       	out	0x3d, r28	; 61
 890:	09 94       	ijmp

00000892 <__epilogue_restores__>:
 892:	2a 88       	ldd	r2, Y+18	; 0x12
 894:	39 88       	ldd	r3, Y+17	; 0x11
 896:	48 88       	ldd	r4, Y+16	; 0x10
 898:	5f 84       	ldd	r5, Y+15	; 0x0f
 89a:	6e 84       	ldd	r6, Y+14	; 0x0e
 89c:	7d 84       	ldd	r7, Y+13	; 0x0d
 89e:	8c 84       	ldd	r8, Y+12	; 0x0c
 8a0:	9b 84       	ldd	r9, Y+11	; 0x0b
 8a2:	aa 84       	ldd	r10, Y+10	; 0x0a
 8a4:	b9 84       	ldd	r11, Y+9	; 0x09
 8a6:	c8 84       	ldd	r12, Y+8	; 0x08
 8a8:	df 80       	ldd	r13, Y+7	; 0x07
 8aa:	ee 80       	ldd	r14, Y+6	; 0x06
 8ac:	fd 80       	ldd	r15, Y+5	; 0x05
 8ae:	0c 81       	ldd	r16, Y+4	; 0x04
 8b0:	1b 81       	ldd	r17, Y+3	; 0x03
 8b2:	aa 81       	ldd	r26, Y+2	; 0x02
 8b4:	b9 81       	ldd	r27, Y+1	; 0x01
 8b6:	ce 0f       	add	r28, r30
 8b8:	d1 1d       	adc	r29, r1
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	f8 94       	cli
 8be:	de bf       	out	0x3e, r29	; 62
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	cd bf       	out	0x3d, r28	; 61
 8c4:	ed 01       	movw	r28, r26
 8c6:	08 95       	ret

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
